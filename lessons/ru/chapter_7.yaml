- title: Глава 7 - Объектно-ориентированное программирование (OOP)
  content_markdown: >
    Выражение идей с помощью функций - это проверенный способ представления поведения и данных
    (в Си это делают десятилетиями!)
    Исторически информатика нашла другие полезные выразительные агрегаты и абстракции для данных.
    Вы можете быть знакомы с объектно-ориентированным программированием (ООП) как одним из таких способов описания абстракций.
    В этой главе мы рассмотрим язык программирования Rust за пределами только функций.
- title: Что такое ООП (OOP)?
  content_markdown: >
    Объектно-ориентированное программирование грубо говоря относится к языкам программирования,
    которые имеют некоторое количество символических особенностей:

    * Инкапсуляция (Encapsulation) - объединение данных и функций в концептуальную единицу единого типа,
    называемую *объектом*.

    * Абстракция (Abstraction) - сокрытие данных и членов функции, чтобы скрыть детали реализации объекта.

    * Полиморфизм (Polymorphism) - способность взаимодействовать с объектом с помощью разных функциональных точек зрения.

    * Наследование (Inheritance) - способность наследовать данные и поведение от других объектов.
- title: Rust не является ООП (OOP) языком
  content_markdown: >
    В Rust отсутствует каким-либо осмысленное наследование данных и поведения.


    * Структуры не могут наследовать поля от родительской структуры.

    * Структуры не могут наследовать функции от родительской структуры.


    Тем не менее, Rust реализует множество функций языка программирования, так что вы можете не обращать на это внимания.
- title: Инкапсуляция с помощью методов
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20creature.get_sound())%3B%0A%7D%0A
  content_markdown: >
    Rust поддерживает концепцию *объекта*, который представляет собой структуру, связанную с некоторыми функциями (также известными как *методы*).


    Первый параметр любого метода (а не функции) должен быть ссылкой на сам экземпляр, связанный с вызовом этого метода (например,
    `instanceOfObj.foo()`). Rust использует для этого параметра типы:

    * `&self` - Не изменяемая ссылка на экземпляр.

    * `&mut self` - Изменяемая ссылка на экземпляр.


    Методы определяются в блоке реализации начинающемся с ключевого слова `impl`:

    ```rust

    impl MyStruct { 
        ...
        fn foo(&self) {
            ...
        }
    }

    ```
- title: Абстракция с выборочной экспозицией (Abstraction With Selective Exposure)
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20creature.get_sound())%3B%0A%7D%0A
  content_markdown: >
    Rust может скрывать внутреннюю работу и структуру объектов (абстракций).


    По умолчанию все поля и методы объявленные структурой являются доступными только самому модулю, которому они принадлежат.


    Ключевое слово `pub` делает публичными поля и методы структуры вне модуля.
- title: Полиморфизм с помощью типажей (Traits)
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Atrait%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%3B%0A%7D%0A%0Aimpl%20NoiseMaker%20for%20SeaCreature%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20%26self.get_sound())%3B%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20creature.make_noise()%3B%0A%7D%0A
  content_markdown: >
    Rust поддерживает полиморфизм с помощью типажей. Типажи позволяют связывать набор методов со структурным типом (*struct*, *enum*).


    Сначала мы определяем сигнатуры методов типажа в коде как:


    ```

    trait MyTrait {
        fn foo(&self);
        ...
    }

    ```


    Когда структура реализует типаж, она устанавливает контракт поведения, который позволяет нам косвенно
    взаимодействовать со структурой через тип данного типажа (например, `&dyn MyTrait`) без необходимости знать реальный тип.


    Методы типажа, реализованные структурой определяются в блоке реализации:


    ```rust

    impl MyTrait for MyStruct { 
        fn foo(&self) {
            ...
        }
        ... 
    }

    ```
- title: Реализация методов в самих типажах
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Atrait%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%3B%0A%20%20%20%20%0A%20%20%20%20fn%20make_alot_of_noise(%26self)%7B%0A%20%20%20%20%20%20%20%20self.make_noise()%3B%0A%20%20%20%20%20%20%20%20self.make_noise()%3B%0A%20%20%20%20%20%20%20%20self.make_noise()%3B%0A%20%20%20%20%7D%0A%7D%0A%0Aimpl%20NoiseMaker%20for%20SeaCreature%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20%26self.get_sound())%3B%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20creature.make_alot_of_noise()%3B%0A%7D%0A
  content_markdown: >
    Типажи могут иметь реализованные методы.


    Функции не имеют прямого доступа к внутренним полям структуры, но могут быть полезны для обмена поведением между многими реализациями типажа.
- title: Наследование типажа (Trait Inheritance)
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Atrait%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%3B%0A%7D%0A%0Atrait%20LoudNoiseMaker%3A%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_alot_of_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20self.make_noise()%3B%0A%20%20%20%20%20%20%20%20self.make_noise()%3B%0A%20%20%20%20%20%20%20%20self.make_noise()%3B%0A%20%20%20%20%7D%0A%7D%0A%0Aimpl%20NoiseMaker%20for%20SeaCreature%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20%26self.get_sound())%3B%0A%20%20%20%20%7D%0A%7D%0A%0Aimpl%20LoudNoiseMaker%20for%20SeaCreature%20%7B%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20creature.make_alot_of_noise()%3B%0A%7D%0A
  content_markdown: |
    Типажи могут наследовать методы от других типажей.
- title: Динамическая vs Статическая диспетчеризация (Dynamic vs Static Dispatch)
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Atrait%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%3B%0A%7D%0A%0Aimpl%20NoiseMaker%20for%20SeaCreature%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20%26self.get_sound())%3B%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20static_make_noise(creature%3A%20%26SeaCreature)%20%7B%0A%20%20%20%20%2F%2F%20we%20know%20the%20real%20type%0A%20%20%20%20creature.make_noise()%3B%0A%7D%0A%0Afn%20dynamic_make_noise(noise_maker%3A%20%26dyn%20NoiseMaker)%20%7B%0A%20%20%20%20%2F%2F%20we%20don't%20know%20the%20real%20type%0A%20%20%20%20noise_maker.make_noise()%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20static_make_noise(%26creature)%3B%0A%20%20%20%20dynamic_make_noise(%26creature)%3B%0A%7D%0A
  content_markdown: >
    Методы выполняются двумя способами:

    * статическая диспетчеризация (static dispatch) - Когда тип экземпляра для вызываемого метода известен,
    мы имеем ясное представление о том какую функцию вызывать.

    * динамическая диспетчеризация (dynamic dispatch) - Когда тип экземпляра неизвестен, мы должны найти способ вызова на нем правильной функции.


    Типы типажа в виде `&dyn MyTrait` дают возможность работать с экземплярами объектов косвенно, используя динамическую диспетчеризацию.


    Когда используется динамическая диспетчеризация (dynamic dispatch), Rust будет просить вас поставить `dyn`
    перед типом типажа, чтобы люди знали об этом.


    Детали для запоминания:

    * Динамическая диспетчеризация является более медленным вызовом методов из-за просмотра указателя (pointer chasing),
    чтобы найти реальный адрес вызываемой функции.
- title: Типаж объекты (Trait Objects)
  content_markdown: >
    Когда мы передаем экземпляр объекта в параметр типа `&dyn MyTrait`, мы передаем то, что называется *типаж объект* (trait object).


    Типаж объект (trait object) - это то, что позволяет нам косвенно вызывать правильные методы экземпляра объекта.
    Типаж объект - это структура, которая содержит указатель нашего экземпляра со списком указателей функций на методы этого экземпляра.


    Детали для запоминания:

    * Этот список функций известен в языке C++ как *vtable* (таблица виртуальных методов).
- title: Обработка не размерных данных (Unsized Data)
  content_markdown: >
    Типажи представляют интересную проблему, когда мы хотим сохранить их в другой структуре.
    Типажи обфусцируют (obfuscate - запутывает) оригинальную структуру,

    таким образом это также запутывает ее оригинальный размер.
    Не размерные значения, хранящиеся в структурах, обрабатываются в Rust двумя способами:


    * `generics` (обобщенные типы) - Использование обощенных типов эффективно создает структуру/функции
    известных типов и, следовательно, известных размеров

    * `indirection` (косвенность) - Размещение экземпляров класса в куче дает нам уровень косвенности,
    который позволяет нам не беспокоиться о размере фактического типа и просто хранить указатель на него.
    Есть и другие способы
- title: Обобщенные функции (Generic Functions)
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Atrait%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%3B%0A%7D%0A%0Aimpl%20NoiseMaker%20for%20SeaCreature%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20%26self.get_sound())%3B%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20generic_make_noise%3CT%3E(creature%3A%20%26T)%0Awhere%0A%20%20%20%20T%3A%20NoiseMaker%2C%0A%7B%0A%20%20%20%20%2F%2F%20we%20know%20the%20real%20type%20at%20compile-time%0A%20%20%20%20creature.make_noise()%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20generic_make_noise(%26creature)%3B%0A%7D%0A
  content_markdown: >
    Обобщенные типы (generics) в Rust работают рука об руку с типажами.
    Когда мы описываем обобщенный тип `T`, мы можем ограничить, какие типы можно использовать в качестве аргумента,
    перечисляя какие обязательные типажи должен реализовывать данный обобщенный аргумент.


    В данном примере тип `T` должен реализовывать типаж `Foo`:

    ```rust

    fn my_function<T>(foo: T)

    where
        T:Foo
    {
        ...
    }

    ```


    Используя обобщенный тип (generics), мы создаем статические типизированные функции во время компиляции,
    которые будут иметь известные типы и размер, что позволяет нам выполнять статическую диспетчеризацию вызова
    и сохранять (функцию) в виде значения известного размера.
- title: Сокращение в обобщенной функции (Generic Function Shorthand)
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Atrait%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%3B%0A%7D%0A%0Aimpl%20NoiseMaker%20for%20SeaCreature%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20%26self.get_sound())%3B%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20generic_make_noise(creature%3A%20%26impl%20NoiseMaker)%0A%7B%0A%20%20%20%20%2F%2F%20we%20know%20the%20real%20type%20at%20compile-time%0A%20%20%20%20creature.make_noise()%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20creature%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20generic_make_noise(%26creature)%3B%0A%7D%0A
  content_markdown: |
    В Rust есть сокращение для записи факта того, что обобщенный тип ограничен каким-то типажом:

    ```rust
    fn my_function(foo: impl Foo) {
        ...
    }
    ```

    Что эквивалентно записи:

    ```rust
    fn my_function<T>(foo: T)
    where
        T:Foo
    {
        ...
    }
    ```
- title: Тип умного указателя Box
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20pub%20name%3A%20String%2C%0A%20%20%20%20noise%3A%20String%2C%0A%7D%0A%0Aimpl%20SeaCreature%20%7B%0A%20%20%20%20pub%20fn%20get_sound(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%26self.noise%0A%20%20%20%20%7D%0A%7D%0A%0Atrait%20NoiseMaker%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%3B%0A%7D%0A%0Aimpl%20NoiseMaker%20for%20SeaCreature%20%7B%0A%20%20%20%20fn%20make_noise(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20%26self.get_sound())%3B%0A%20%20%20%20%7D%0A%7D%0A%0Astruct%20Ocean%20%7B%0A%20%20%20%20animals%3A%20Vec%3CBox%3Cdyn%20NoiseMaker%3E%3E%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20ferris%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22blub%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20let%20sarah%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Sarah%22)%2C%0A%20%20%20%20%20%20%20%20noise%3A%20String%3A%3Afrom(%22swish%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20let%20ocean%20%3D%20Ocean%20%7B%0A%20%20%20%20%20%20%20%20animals%3A%20vec!%5BBox%3A%3Anew(ferris)%2C%20Box%3A%3Anew(sarah)%5D%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20for%20a%20in%20ocean.animals.iter()%20%7B%0A%20%20%20%20%20%20%20%20a.make_noise()%3B%0A%20%20%20%20%7D%0A%7D%0A
  content_markdown: >
    `Box` - это структура данных, которая позволяет нам размешать, перемещать наши данные из стека в кучу.


    `Box` - это структура, известная как *smart pointer* (умный указатель), который содержит указатель на наши данные
    хранящиеся в куче.


    Поскольку `Box` является структурой с известным размером (поскольку он просто содержит указатель),
    то он часто используется как способ хранения ссылки на что-то в структуре, которая должна иметь
    известные размеры ее полей.


    Тип `Box` является настолько общим, что может использоваться почти в любом месте:


    ```rust

    Box::new(Foo { ... })

    ```
- title: Обощенные структуры снова (Generic Structs Revisited)
  content_markdown: >
    Обобщенные структуры также могут иметь свои обобщенные, параметризованные типы, ограниченные типажами.


    ```rust

    struct MyStruct<T>

    where
        T: MyTrait
    {
        foo: T
        ...
    }

    ```


    Обобщенная структура имеет обобщенный, параметризованный тип в блоке реализации:


    ```rust

    impl<T> MyStruct<T> {
        ...
    }

    ```
- title: Глава 7 - Заключение
  content_markdown: >
    Теперь у нас есть больше языковых возможностей для ясного представления наших идей!

    Абстракции Rust могут быть простыми, но они достаточно мощные, чтобы сделать работу с кодом приятной.

    В этой главе мы увидели умные указатели `Box`. В следующей главе вы изучите о том, как
    умные указатели могут помочь нам в других специализированных ситуациях работы с памятью.



    Ресурсы для изучения на английском:

    * [Video - Object-oriented Programming in 7
    minutes](https://www.youtube.com/watch?v=pTB0EiLXUC8)

    * [Article - "The faster you unlearn OOP, the better for you and your
    software"](https://dpc.pw/the-faster-you-unlearn-oop-the-better-for-you-and-your-software)
