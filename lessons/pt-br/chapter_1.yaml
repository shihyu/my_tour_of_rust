- title: Capítulo 1 - O Básico
  content_markdown: >
    Neste primeiro capítulo iremos explorar o mais básico sobre funções, variáveis e os tipos de dados mais primitivos. Bem-vindo a bordo!


    E se por acaso você está se perguntando quem é este adorável caranguejo falante, eu me chamo **Ferris** e sou o mascote não oficial da linguagem de programação Rust. Prazer em conhecê-lo.
- title: O Playgroung do Rust
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20println!(%22Bem-vindo%20%C3%A0%20%C3%A1rea%20de%20testes!%20Voc%C3%AA%20pode%20modificar%20seu%20c%C3%B3digo%20aqui.%22)%3B%0A%7D%0A
  content_markdown: >
    Este tour usa a ferramenta de codificação interativa [Rust Playground](https://play.rust-lang.org)


    É uma boa maneira de brincar com Rust e mostrar aos outros a sua criatividade e desafios!
- title: Variáveis
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20%2F%2F%20Rust%20infere%20o%20tipo%20de%20x%0A%20%20%20%20let%20x%20%3D%2013%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%0A%20%20%20%20%2F%2F%20Rust%20tamb%C3%A9m%20pode%20ser%20expl%C3%ADcito%20com%20o%20tipo%0A%20%20%20%20let%20x%3A%20f64%20%3D%203.14159%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%0A%20%20%20%20%2F%2F%20Rust%20tamb%C3%A9m%20pode%20declarar%20primero%20e%20inicializar%20depois%2C%20mas%20%C3%A9%20incomum%0A%20%20%20%20let%20x%3B%0A%20%20%20%20x%20%3D%200%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%7D%0A
  content_markdown: >
    Variáveis são declaradas usando a palavra-chave **let**.


    Quando atribuimos um valor, o Rust poderá inferir o tipo da sua variável em 99% dos casos.


    Se não for possível, você poderá especificar o tipo ao declarar a variável.


    Veja que podemos atribuir valores à mesma variável várias vezes. Isto é chamado *sobreamento* de variáveis (shadowing) e podemos mudar o seu tipo para referências futuras a esse nome.


    Os nomes das variáveis são sempre em `snake_case`.
- title: Modificando valores
  content_markdown: >
    Em Rust é importante levar em consideração quais valores serão alterados. Os valores se dividem em dois tipos:


    * **mutáveis** - o compilador permitirá que a variável seja lida e gravada.

    * **imutáveis** - o compilador permitirá apenas a leitura da variável.


    Valores mutáveis são marcados com a palavra-chave **mut**.


    Temos muito a explicar ainda sobre este conceito, mas por enquanto apenas preste atenção nesta palavra-chave.
- title: Tipos básicos
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20x%20%3D%2012%3B%20%2F%2F%20infere%20o%20tipo%20i32%0A%20%20%20%20let%20a%20%3D%2012u8%3B%0A%20%20%20%20let%20b%20%3D%204.3%3B%20%2F%2F%20infere%20o%20tipo%20f64%0A%20%20%20%20let%20c%20%3D%204.3f32%3B%0A%20%20%20%20let%20bv%20%3D%20true%3B%0A%20%20%20%20let%20t%20%3D%20(13%2C%20false)%3B%0A%20%20%20%20let%20sentence%20%3D%20%22Ol%C3%A1%2C%20mundo!%22%3B%0A%20%20%20%20println!(%0A%20%20%20%20%20%20%20%20%22%7B%7D%20%7B%7D%20%7B%7D%20%7B%7D%20%7B%7D%20%7B%7D%20%7B%7D%20%7B%7D%22%2C%0A%20%20%20%20%20%20%20%20x%2C%20a%2C%20b%2C%20c%2C%20bv%2C%20t.0%2C%20t.1%2C%20sentence%0A%20%20%20%20)%3B%0A%7D%0A
  content_markdown: >
    Rust tem uma variedade tipos que lhe serão familiares:


    * booleanos - `bool` para representar verdadeiro/falso

    * números inteiros sem sinal - `u8` `u32` `u64` `u128` para representar números inteiros não negativos

    * números inteiros com sinal - `i8` `i32` `i64` `i128` para representar números inteiros positivos e negativos

    * ponteiros de números inteiros - `usize` `isize` para representar índices e o comprimento de coleções em memória

    * números de ponto flutuante - `f32` `f64`

    * tuplas - `(value, value, ...)` para passar sequências de valores fixas para a pilha

    * matriz - uma coleção de elementos similares com comprimento fixo conhecidos em tempo de compilação

    * slices - uma coleção de elementos similares com comprimento conhecido em tempo de execução

    * `str` (string slice) - texto com comprimento conhecido em tempo de execução


    Textos podem ser mais complexos do que você está acostumado com outras linguagens. Uma vez que o Rust é uma linguagem de programação de sistemas, ele cuida do gerenciamento de memória de uma maneira que pode não estar familiarizado. Entraremos em detalhes mais adiante.


    Tipos numéricos podem ser especificados explicitamente adicionando o tipo ao final do número (por exemplo: `13u32`, `2u8`)
- title: Conversão de tipos básica
  content_markdown: >
    O Rust requer que sejamos explícitos quando se trata de tipos numéricos. Não podemos usar um `u8` quando precisamos usar um `u32` sem que se produza um erro.


    Por sorte o Rust faz com que as conversões de tipos numéricos sejam muito simples usando a plavra-chave **as**.
- title: Constantes
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=const%20PI%3A%20f32%20%3D%203.14159%3B%0A%0Afn%20main()%20%7B%0A%20%20%20%20println!(%0A%20%20%20%20%20%20%20%20%22Para%20fazer%20uma%20%7B%7Dzza%2C%20voc%C3%AA%20deve%20primeiro%20criar%20o%20Universo.%22%2C%0A%20%20%20%20%20%20%20%20PI%0A%20%20%20%20)%3B%0A%7D%0A
  content_markdown: >
    As constantes nos permitem especificar um valor comum que pode ser usado muitas vezes por todos o nosso código de maneira eficiente. Ao invés de copiar os valores como variáveis onde serão utilizadas, as constantes substituirão o identificador de texto pelo seu valor onde quer que estejam sendo usadas em tempo de compilação.


    Diferentemente das variáveis, o tipo das constantes devem ter sempre declarados.


    Os nomes das constantes são sempre em `SCREAMING_SNAKE_CASE`.
- title: Matrizes
  content_markdown: >
    Uma *matriz* é uma coleção de elementos de tamanho fixo todos os seu valores do mesmo tipo.


    O tipo de dado para uma *matriz* é `[T;N]`, onde T é o tipo dos valores e N é o comprimento fixo conhecido em tempo de compilação.


    Os elementos podem ser recuperados individualmente com o operador `[x]`, onde *x* é o índice do tipo *usize* (começando de 0) do elemento que deseja recuperar.
- title: Funções
  content_markdown: >
    Uma função pode receber zero ou mais parâmetros.


    Neste exemplo, *add* recebe dois parâmetros do tipo `i32` (número inteiro de 32 bits).


    Os nomes das funções são sempre em `snake_case`.
- title: Retorno de Múltiplos Valores
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20swap(x%3A%20i32%2C%20y%3A%20i32)%20-%3E%20(i32%2C%20i32)%20%7B%0A%20%20%20%20return%20(y%2C%20x)%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20devolve%20uma%20tupla%20de%20valores%0A%20%20%20%20let%20result%20%3D%20swap(123%2C%20321)%3B%0A%20%20%20%20println!(%22%7B%7D%20%7B%7D%22%2C%20result.0%2C%20result.1)%3B%0A%0A%20%20%20%20%2F%2F%20desestrutura%20a%20tupla%20para%20duas%20vari%C3%A1veis%0A%20%20%20%20let%20(a%2C%20b)%20%3D%20swap(result.0%2C%20result.1)%3B%0A%20%20%20%20println!(%22%7B%7D%20%7B%7D%22%2C%20a%2C%20b)%3B%0A%7D%0A
  content_markdown: >
    Funções podem devolver múltiplos valores retornando uma **tupla** de valores.


    Os elementos da tupla podem ser referenciados pelo seu índice.


    O Rust suporta vários modos de desestruturação que veremos em diferentes formas, permitindo extrair subconjuntos de dados de maneira prática.
- title: Retornando nada
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20faz_nada()%20-%3E%20()%20%7B%0A%20%20%20%20return%20()%3B%0A%7D%0A%0A%2F%2F%20o%20tipo%20de%20retorno%20%C3%A9%20implicitamente%20()%0Afn%20faz_nada2()%20%7B%0A%20%20%20%20%2F%2F%20esta%20fun%C3%A7%C3%A3o%20ir%C3%A1%20devolver%20()%20se%20nada%20for%20especificado%20para%20retornar%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20a%20%3D%20faz_nada()%3B%0A%20%20%20%20let%20b%20%3D%20faz_nada2()%3B%0A%0A%20%20%20%20%2F%2F%20Exibindo%20uma%20string%20de%20depura%C3%A7%C3%A3o%20para%20a%20e%20b%0A%20%20%20%20%2F%2F%20Porque%20%C3%A9%20dif%C3%ADcil%20n%C3%A3o%20mostrar%20nada%0A%20%20%20%20println!(%22O%20valor%20de%20a%3A%20%7B%3A%3F%7D%22%2C%20a)%3B%0A%20%20%20%20println!(%22O%20valor%20de%20b%3A%20%7B%3A%3F%7D%22%2C%20b)%3B%0A%7D%0A
  content_markdown: >
    Se nenhum tipo for especificado para o retorno de uma função, ele devolve uma tupla vazia, também conhecida como *unit*.


    Uma tupla vazia é representada por `()`.


    O uso de `()` é incomum, mas é necessário saber o seu significado uma vez que aparecerá de vez em quando.
- title: Capítulo 1 - Conclusão
  content_markdown: |
    Bom trabalho! O básico do Rust não foi tão ruim, não é? Este foi só o comecinho de como o compilador Rust trabalha. Por ser uma linguagem de programação de sistemas, ele se importa muito com o tamanho dos valores na memória, se as coisas podem ser modificadas ou não, e garantir que sua matemática seja o que você quer que seja. A seguir veremos alguns velhos amigos: `if` e `for`.


    Mais recursos:


    * [Youtube: Rust Cast - A deeper dive on Rust's primitive number types](https://www.youtube.com/watch?v=n5TRBkbystY)

    * [Website: Rust Book 2018 - A deeper description on basic data types](https://doc.rust-lang.org/1.30.0/book/2018-edition/ch03-02-data-types.html)

    * [Website: Rust Cheat Sheet - Data Types](https://cheats.rs/#basic-types)
