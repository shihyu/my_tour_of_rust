- title: Capítulo 5 - Propriedade & Empréstimo de Dados
  content_markdown: >
    O Rust possui um paradigma singular para gerenciar a memória em comparação a outras linguagens de programação. Vamos analisar os comportamentos e validações do compilador, um por um, para que os conceitos não sejam muito pesados. É importante lembrar que, no fim das contas, as regras que mostramos não existem para dificultar sua vida, mas para ajudá-lo a tornar seu código menos propenso a erros!
- title: Propriedade
  content_markdown: >
    Instanciar um tipo e **vinculá-lo** a um nome de variável cria um recurso de memória que o compilador Rust validará por toda sua a **vida útil**. A variável vinculada é chamada de **proprietária** do recurso.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20Instanciamos%20structs%20e%20vinculamos%20a%20vari%C3%A1veis%0A%20%20%20%20%2F%2F%20para%20criar%20recursos%20de%20mem%C3%B3ria%0A%20%20%20%20let%20foo%20%3D%20Foo%20%7B%20x%3A%2042%20%7D%3B%0A%20%20%20%20%2F%2F%20foo%20%C3%A9%20o%20propriet%C3%A1rio%0A%7D%0A
- title: Gerenciamento de Recursos Baseado em Escopo
  content_markdown: >
    O Rust usa o final do escopo como o lugar para desconstruir e desalocar um recurso.

    O termo para esta descontrução e desalocação é chamado **descarte** (ou *drop*).


    Detalhes da memória:


    * O Rust não tem garbage collection.

    * Também conhecido por Aquisição de Recursos é Inicialização (sigla RAII, em inglês) em C++.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20foo_a%20%3D%20Foo%20%7B%20x%3A%2042%20%7D%3B%0A%20%20%20%20let%20foo_b%20%3D%20Foo%20%7B%20x%3A%2013%20%7D%3B%0A%0A%20%20%20%20println!(%22%7B%7D%22%2C%20foo_a.x)%3B%0A%20%20%20%20%2F%2F%20foo_a%20%C3%A9%20descartado%20aqui%20porque%20n%C3%A3o%20%C3%A9%20mais%0A%20%20%20%20%2F%2F%20usado%20depois%20deste%20lugar%0A%0A%20%20%20%20println!(%22%7B%7D%22%2C%20foo_b.x)%3B%0A%20%20%20%20%2F%2F%20foo_b%20%C3%A9%20descartado%20aqui%20porque%20%C3%A9%20o%20fim%0A%20%20%20%20%2F%2F%20do%20escopo%20da%20fun%C3%A7%C3%A3o%0A%7D%0A
- title: O Descarte é Hierárquico
  content_markdown: >
    Quando uma estrutura é descartada, a estrutura em si é descartada primeiro, depois os filhos são descartados individualmente e assim por diante.


    Detalhes da Memória:


    * Ao liberar automaticamente a memória, o Rust ajuda a garantir que haja menos vazamentos de memória.

    * Os recursos de memória só podem ser descartados uma vez.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Bar%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0Astruct%20Foo%20%7B%0A%20%20%20%20bar%3A%20Bar%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20foo%20%3D%20Foo%20%7B%20bar%3A%20Bar%20%7B%20x%3A%2042%20%7D%20%7D%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20foo.bar.x)%3B%0A%20%20%20%20%2F%2F%20foo%20%C3%A9%20descartado%20primeiro%0A%20%20%20%20%2F%2F%20e%20s%C3%B3%20ent%C3%A3o%20foo.bar%20%C3%A9%20descartado%0A%7D%0A
- title: Movendo a Propriedade
  content_markdown: >
    Quando um proprietário é passado como argumento para uma função, a propriedade é movida para o parâmetro da função.


    Após um **movimento**, a variável na função original não pode mais ser usada.


    Detalhes da memória:


    * Durante uma **movimentação**, a memória da pilha do proprietário do valor é copiada para a memória da pilha dos parâmetros da função chamada.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0Afn%20faz_alguma_coisa(f%3A%20Foo)%20%7B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20f.x)%3B%0A%20%20%20%20%2F%2F%20f%20%C3%A9%20descartado%20aqui%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20foo%20%3D%20Foo%20%7B%20x%3A%2042%20%7D%3B%0A%20%20%20%20%2F%2F%20foo%20%C3%A9%20movido%20para%20faz_alguma_coisa%0A%20%20%20%20faz_alguma_coisa(foo)%3B%0A%20%20%20%20%2F%2F%20foo%20n%C3%A3o%20pode%20mais%20ser%20usado%0A%7D%0A
- title: Retornando a Propriedade
  content_markdown: |
    A propriedade também pode ser retornada de uma função.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0Afn%20do_something()%20-%3E%20Foo%20%7B%0A%20%20%20%20Foo%20%7B%20x%3A%2042%20%7D%0A%20%20%20%20%2F%2F%20a%20propriedade%20%C3%A9%20retornada%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20foo%20%3D%20do_something()%3B%0A%20%20%20%20%2F%2F%20foo%20se%20torna%20o%20propriet%C3%A1rio%0A%20%20%20%20%2F%2F%20foo%20%C3%A9%20descartado%20por%20causa%20do%20fim%20do%20escopo%20da%20fun%C3%A7%C3%A3o%0A%7D%0A
- title: Emprestando Propriedade com Referências
  content_markdown: >
    As referências nos permitem emprestar o acesso a um recurso com o operador `&`.


    As referências também são descartadas do mesmo jeito que os outros recursos.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20foo%20%3D%20Foo%20%7B%20x%3A%2042%20%7D%3B%0A%20%20%20%20let%20f%20%3D%20%26foo%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20f.x)%3B%0A%20%20%20%20%2F%2F%20f%20%C3%A9%20descartado%20aqui%0A%20%20%20%20%2F%2F%20foo%20%C3%A9%20descartado%20aqui%0A%7D%0A
- title: Emprestando Propriedades Mutáveis Usando Referências
  content_markdown: >
    Também podemos emprestar um acesso mutável a um recurso usando o operador `& mut`.


    O proprietário de um recurso não pode ser movido ou modificado durante um empréstimo mutável.


    Detalhes de memória:


    * O Rust evita ter duas maneiras de alterar um valor que tenha um dono, pois introduz a possibilidade de uma corrida de dados.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0Afn%20faz_alguma_coisa(f%3A%20Foo)%20%7B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20f.x)%3B%0A%20%20%20%20%2F%2F%20f%20%C3%A9%20descartado%20aqui%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20mut%20foo%20%3D%20Foo%20%7B%20x%3A%2042%20%7D%3B%0A%20%20%20%20let%20f%20%3D%20%26mut%20foo%3B%0A%0A%20%20%20%20%2F%2F%20FAILURE%3A%20faz_alguma_coisa(foo)%20ir%C3%A1%20falhar%20porque%0A%20%20%20%20%2F%2F%20foo%20n%C3%A3o%20pode%20ser%20movida%20durante%20um%20empr%C3%A9stimo%20mut%C3%A1vel%0A%0A%20%20%20%20%2F%2F%20FAILURE%3A%20foo.x%20%3D%2013%3B%20ir%C3%A1%20falhar%20porque%0A%20%20%20%20%2F%2F%20foo%20n%C3%A3o%20%C3%A9%20modific%C3%A1vel%20durante%20um%20empr%C3%A9stimo%20mut%C3%A1vel%0A%0A%20%20%20%20f.x%20%3D%2013%3B%0A%20%20%20%20%2F%2F%20f%20%C3%A9%20descartado%20aqui%20por%20n%C3%A3o%20ser%20mais%20usado%20depois%20deste%20ponto%0A%20%20%20%20%0A%20%20%20%20println!(%22%7B%7D%22%2C%20foo.x)%3B%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20isto%20aqui%20funciona%20agora%20porque%20todas%20as%20refer%C3%AAncias%20%0A%20%20%20%20%2F%2F%20mut%C3%A1veis%20foram%20descartadas%0A%20%20%20%20foo.x%20%3D%207%3B%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20move%20a%20propriedade%20de%20foo%20para%20uma%20fun%C3%A7%C3%A3o%0A%20%20%20%20faz_alguma_coisa(foo)%3B%0A%7D%0A
- title: Desreferenciando
  content_markdown: >
    Usando referências você pode definir o valor do proprietário usando o operador `*`.


    Você também pode obter uma cópia do valor de propriedade usando o operador `*` (Se o valor puder ser copiado. Discutiremos tipos copiáveis nos próximos capítulos).
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20mut%20foo%20%3D%2042%3B%0A%20%20%20%20let%20f%20%3D%20%26mut%20foo%3B%0A%20%20%20%20let%20bar%20%3D%20*f%3B%20%2F%2F%20pega%20uma%20c%C3%B3pia%20do%20propriet%C3%A1rio%20do%20valor%0A%20%20%20%20*f%20%3D%2013%3B%20%20%20%20%20%20%2F%2F%20atribue%20%C3%A0%20refer%C3%AAncia%20do%20propriet%C3%A1rio%20do%20valor%0A%20%20%20%20println!(%22%7B%7D%22%2C%20bar)%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20foo)%3B%0A%7D%0A
- title: Passando Dados Emprestados
  content_markdown: >
    As regras do Rust para referências podem ser melhor resumidas assim:


    * O Rust permite que haja apenas uma referência mutável **ou** múltiplas referências não-mutáveis, **mas não ambas**.

    * Uma referência nunca deve **viver mais** do que o seu proprietário.


    Isso não costuma ser um problema ao passar referências a funções.


    Detalhes da memória:


    * A primeira regra das referências previnem as corridas de dados. O que é uma corrida de dados? Uma corrida de dados acontece quando, na leitura dos dados, temos a possibilidade de conflito com a existência de outras escritas de dados ao mesmo tempo. Isso acontece frequentemente na programação multithread.

    * A segunda regra de referências evita o uso indevido de referências que se referem a dados inexistentes (chamados ponteiros pendentes em C).
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0Afn%20faz_alguma_coisa(f%3A%20%26mut%20Foo)%20%7B%0A%20%20%20%20f.x%20%2B%3D%201%3B%0A%20%20%20%20%2F%2F%20a%20refer%C3%AAncia%20mut%C3%A1vel%20f%20%C3%A9%20descartada%20aqui%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20mut%20foo%20%3D%20Foo%20%7B%20x%3A%2042%20%7D%3B%0A%20%20%20%20faz_alguma_coisa(%26mut%20foo)%3B%0A%20%20%20%20%2F%2F%20porque%20todas%20as%20refer%C3%AAncias%20mut%C3%A1veis%20s%C3%A3o%20descartadas%20dentro%0A%20%20%20%20%2F%2F%20da%20fun%C3%A7%C3%A3o%20faz_alguma_coisa.%20Ent%C3%A3o%20podemos%20criar%20outra%20refer%C3%AAncia.%0A%20%20%20%20faz_alguma_coisa(%26mut%20foo)%3B%0A%20%20%20%20%2F%2F%20foo%20%C3%A9%20descartado%20aqui%0A%7D%0A
- title: Referências de Referências
  content_markdown: |
    Referências podem ser usadas até mesmo em pedaços de referências.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0Afn%20faz_alguma_coisa(a%3A%20%26Foo)%20-%3E%20%26i32%20%7B%0A%20%20%20%20return%20%26a.x%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20mut%20foo%20%3D%20Foo%20%7B%20x%3A%2042%20%7D%3B%0A%20%20%20%20let%20x%20%3D%20%26mut%20foo.x%3B%0A%20%20%20%20*x%20%3D%2013%3B%0A%20%20%20%20%2F%2F%20x%20%C3%A9%20descartado%20aqui%20permitindo-nos%20criar%20uma%20refer%C3%AAncia%20n%C3%A3o%20mut%C3%A1vel%0A%20%20%20%20let%20y%20%3D%20faz_alguma_coisa(%26foo)%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20y)%3B%0A%20%20%20%20%2F%2F%20y%20%C3%A9%20descartado%20aqui%0A%20%20%20%20%2F%2F%20foo%20%C3%A9%20descartado%20aqui%0A%7D%0A
- title: Tempo de Vida Explícito
  content_markdown: >
    Mesmo que o Rust nem sempre nos mostre no código, o compilador conhece o tempo de vida de cada variável e tentará validar uma referência que nunca deve existir por mais tempo que seu proprietário.


    As funções podem ser explícitas parametrizando a assinatura da função com símbolos que ajudam a identificar quais parâmetros e valores de retorno compartilham a mesma tempo de vida.


    Os especificadores de tempo de vida sempre começam com um `'` (por exemplo `'a`, `'b`, `'c`)
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0A%2F%2F%20o%20par%C3%A2metro%20foo%20e%20valor%20de%20retorno%20compartilham%20o%20mesmo%20tempo%20de%20vida%0Afn%20faz_alguma_coisa%3C'a%3E(foo%3A%20%26'a%20Foo)%20-%3E%20%26'a%20i32%20%7B%0A%20%20%20%20return%20%26foo.x%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20mut%20foo%20%3D%20Foo%20%7B%20x%3A%2042%20%7D%3B%0A%20%20%20%20let%20x%20%3D%20%26mut%20foo.x%3B%0A%20%20%20%20*x%20%3D%2013%3B%0A%20%20%20%20%2F%2F%20x%20%C3%A9%20descartada%20aqui%20permitindo-nos%20criar%20uma%20refr%C3%AAncia%20n%C3%A3o-mut%C3%A1vel%0A%20%20%20%20let%20y%20%3D%20faz_alguma_coisa(%26foo)%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20y)%3B%0A%20%20%20%20%2F%2F%20y%20%C3%A9%20descartada%20aqui%0A%20%20%20%20%2F%2F%20foo%20%C3%A9%20descartada%20aqui%0A%7D%0A
- title: Tempos de Vida Múltiplos
  content_markdown: >
    Os especificadores de tempo de vida nos permitem ser explícitos em certos cenários que o compilador não pode resolver sozinho, distinguindo todas os tempo de vida dos componentes na assinatura de uma função.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0A%2F%2F%20foo_b%20e%20o%20valor%20de%20retorno%20compartilham%20do%20mesmo%20tempo%20de%20vida%0A%2F%2F%20foo_a%20tem%20um%20tempo%20de%20vida%20n%C3%A3o%20relacionado%0Afn%20faz_alguma_coisa%3C'a%2C%20'b%3E(foo_a%3A%20%26'a%20Foo%2C%20foo_b%3A%20%26'b%20Foo)%20-%3E%20%26'b%20i32%20%7B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20foo_a.x)%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20foo_b.x)%3B%0A%20%20%20%20return%20%26foo_b.x%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20foo_a%20%3D%20Foo%20%7B%20x%3A%2042%20%7D%3B%0A%20%20%20%20let%20foo_b%20%3D%20Foo%20%7B%20x%3A%2012%20%7D%3B%0A%20%20%20%20let%20x%20%3D%20faz_alguma_coisa(%26foo_a%2C%20%26foo_b)%3B%0A%20%20%20%20%2F%2F%20foo_a%20%C3%A9%20descartado%20aqui%20porque%20somente%20o%20tempo%20de%20vida%20de%20%0A%20%20%20%20%2F%2F%20foo_b%20existe%20al%C3%A9m%20deste%20ponto%0A%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%20%20%20%20%2F%2F%20x%20%C3%A9%20descartado%20aqui%0A%20%20%20%20%2F%2F%20foo_b%20%C3%A9%20descartado%20aqui%0A%7D%0A
- title: Tempos de Vida Estáticos
  content_markdown: >
    Uma variável **estática** é um recurso de memória criado em tempo de compilação que existe do início ao fim dentro de um programa. Eles devem ter seus tipos especificados explicitamente.


    Um recurso com **tempo de vida estático** é um recurso de memória que dura indefinidamente até o término de um programa. Observe que, por essa definição, alguns recursos com tempo de vida estático podem ser criados em tempo de execução.


    Recursos com tempo de vida estático têm o especificador de tempo de vida especial `'static`.


    Recursos `'static` nunca serão **descartados**.


    Se os recursos com tempo de vida estático contiverem referências, todos deverão ser `'static` (nada menos do que isso viveria tempo suficiente).


    Detalhes da memória:


    * A modificação de variáveis estáticas é inerentemente perigosa, porque elas são acessíveis globalmente para serem lidas por qualquer um introduzindo a possibilidade de uma corrida de dados. Falaremos sobre os desafios dos dados globais mais tarde.

    * O Rust permite o uso do bloco `unsafe {...}` para executar algumas operações sobre as quais o compilador não pode garantir a integridade do que está guardado na memória. O [<span
    style="color:red; font-weight:
    bold;">R̸͉̟͈͔̄͛̾̇͜U̶͓͖͋̅Ṡ̴͉͇̃̉̀T̵̻̻͔̟͉́͆Ơ̷̥̟̳̓͝N̶̨̼̹̲͛Ö̵̝͉̖̏̾̔M̶̡̠̺̠̐͜Î̷̛͓̣̃̐̏C̸̥̤̭̏͛̎͜O̶̧͚͖͔̊͗̇͠N̸͇̰̏̏̽̃</span>](https://doc.rust-lang.org/nomicon/)
    não deve ser mencionado em vão.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=static%20PI%3A%20f64%20%3D%203.1415%3B%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20vari%C3%A1veis%20est%C3%A1ticas%20tamb%C3%A9m%20podem%20ter%20escopo%20definido%20para%20uma%20fun%C3%A7%C3%A3o%0A%20%20%20%20static%20mut%20SECRETO%3A%20%26'static%20str%20%3D%20%22senha%22%3B%0A%0A%20%20%20%20%2F%2F%20strings%20t%C3%AAm%20o%20mesmo%20tempo%20de%20vida%20que%20as%20vari%C3%A1veis%20est%C3%A1ticas%0A%20%20%20%20let%20msg%3A%20%26'static%20str%20%3D%20%22Ol%C3%A1%20Mundo!%22%3B%0A%20%20%20%20let%20p%3A%20%26'static%20f64%20%3D%20%26PI%3B%0A%20%20%20%20println!(%22%7B%7D%20%7B%7D%22%2C%20msg%2C%20p)%3B%0A%0A%20%20%20%20%2F%2F%20voc%C3%AA%20pode%20quebrar%20algumas%20regras%2C%20mas%20deve%20ser%20expl%C3%ADcito%0A%20%20%20%20unsafe%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20podemos%20atribuir%20uma%20string%20a%20SECRETO%20porque%20ela%20tamb%C3%A9m%20%C3%A9%20est%C3%A1tica%0A%20%20%20%20%20%20%20%20SECRETO%20%3D%20%22abracadabra%22%3B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20SECRETO)%3B%0A%20%20%20%20%7D%0A%7D%0A
- title: Tempos de Vida em Tipos de Dados
  content_markdown: >
    Da mesma forma que as funções, os tipos de dados podem ser parametrizados com os especificadores de tempos de vida.


    O Rust valida a estrutura de dados que contém as referências para que nunca dure mais do que os proprietários para os quais as suas referências apontam.


    Não podemos ter estruturas rodando por aí com referências apontando para o nada!
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%3C'a%3E%20%7B%0A%20%20%20%20i%3A%26'a%20i32%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20x%20%3D%2042%3B%0A%20%20%20%20let%20foo%20%3D%20Foo%20%7B%0A%20%20%20%20%20%20%20%20i%3A%20%26x%0A%20%20%20%20%7D%3B%0A%20%20%20%20println!(%22%7B%7D%22%2Cfoo.i)%3B%0A%7D%0A
- title: Capítulo 5 - Conclusão
  content_markdown: >
    Ufa, parabéns por passar! Eu sei que é muito para absorver, mas você está bem encaminhado para se tornar um Rustáceo. Espero que esteja claro que o Rust como linguagem visa solucionar muitos desses desafios comuns na programação de sistemas:


    * Modificação não intencional de recursos.

    * Esquecendo de desconstruir recursos.

    * Recursos sendo desconstruídos duas vezes acidentalmente.

    * Usando recursos depois que eles foram desconstruídos. 

    * Corridas de dados causadas pela gravação nos recursos enquanto outros estão lendo os mesmos recursos.

    * Vendo claramente áreas do código em que o compilador não pode dar garantias


    No próximo capítulo aplicaremos um pouco desse conhecimento ao ver como o Rust manipula textos.
