- title: Chapitre 3 - Types basiques de structure de données
  content_markdown: >
    Il est temps d'explorer autre chose que les types basiques! Dans ce chapitre
    nous allons

    nous intéresser aux structures de données les plus primitives de Rust, en
    étudiant particulièrement

    de quelle manière celles-ci sont représentées en mémoire. Je pense que tu
    apprécieras le fait que

    Rust ne nous cache pas comment les choses fonctionnent.
- title: Structures
  content_markdown: >
    Une structure est une collection de champs. On crée une structure avec le
    mot clé `struct`.


    Un *champs* est simplement un élément contenant une valeur et qui est
    associé à une structure de données.

    Sa valeur peut être un type primitif ou une autre structure de données.


    Sa définition est comme un plan pour le compilateur sur l'agencement des
    données en mémoire.

    Celles-ci seront placées à proximité les unes des autres.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20%2F%2F%20String%20est%20%C3%A9galement%20une%20structure%0A%20%20%20%20animal_type%3A%20String%2C%0A%20%20%20%20name%3A%20String%2C%0A%20%20%20%20arms%3A%20i32%2C%0A%20%20%20%20legs%3A%20i32%2C%0A%20%20%20%20weapon%3A%20String%2C%0A%7D
- title: Appel de méthodes
  content_markdown: >
    A la différence des fonctions que nous avons vu précédemment, les méthodes
    sont

    des fonctions associées à un type de donnée spécifique.


    **méthodes statiques** — méthodes qui appartiennent au type même et sont
    appelées avec l'opérateur `::`


    **méthodes d'instance** — méthodes qui appartiennent à l'instance d'un type
    et sont appelées avec l'opérateur `.`


    Nous verrons comment créer tes propres méthodes dans de futurs chapitres.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20%2F%2F%20On%20utilise%20une%20m%C3%A9thode%20statique%20pour%20cr%C3%A9er%20une%20instance%20de%20String%0A%20%20%20%20let%20s%20%3D%20String%3A%3Afrom(%22Hello%20world!%22)%3B%0A%20%20%20%20%2F%2F%20On%20utilise%20ici%20une%20m%C3%A9thode%20directement%20sur%20l%27instance%0A%20%20%20%20println!(%22%7B%7D%20contient%20%7B%7D%20caract%C3%A8res.%22%2C%20s%2C%20s.len())%3B%0A%7D%0A
- title: Mémoire
  content_markdown: >
    Un programme Rust possède 3 régions de mémoire où les données sont stockées:

    * **data memory (le segment de données)** - Pour les données de taille fixe
    et **statiques** (i.e toujours
      disponible pendant la vie du programme). Par exemple, considère le texte "Hello World!"
      de ton tout premier programme Rust, les bytes représentant ce texte sont lu à un seul endroit
      et par conséquent ils sont placés dans cette région. Le compilateur utilise de
      nombreuses optimisations pour ce type de données, elles sont généralement
      considérées très rapide d'utilisation car leur position en mémoire est connue
      et fixe.
    * **stack memory (la pile)** - Pour les données qui sont déclarées comme
    variables dans une fonction.
      La position de cette mémoire ne change jamais pendant la durée d'appel de cette fonction,
      par conséquent les compilateurs peuvent optimiser le code pour rendre l'accès des données
      sur la pile très rapide.
    * **heap memory (le tas)** - Pour les données qui sont créées lorsque
    l'application est en train de s'exécuter. 
      Les données dans cette région peuvent être ajoutées, déplacées, supprimées, redimensionnées, etc.
      À cause de sa nature dynamique, c'est généralement considéré plus lent d'utilisation que la pile, mais
      donne plus de contrôle sur l'utilisation de la mémoire.
      On appelle **allocation** le fait d'ajouter des données à cette région et
      **désallocation** le fait de les supprimer.
- title: Création de donnée en mémoire
  content_markdown: >
    Lorsqu'on **instancie** une **structure** dans notre code, le programme

    crée les champs de données associés côte à côte en mémoire.


    On instancie une structure en spécifiant les champs dans des accolades.


    `StructName { ... }`.


    On accède aux champs de la structure avec l'opérateur `.`.


    Détail de la mémoire pour notre exemple:

    * Le texte à l'intérieur des guillemets est une donnée de lecture uniquement
    (e.g. "ferris"),

    celui-ci est donc placé dans la région *data memory*.

    * L'appel à la fonction `String::from` crée une structure `String` qui est
    placée en mémoire à côté
      des champs de la structure SeaCreature sur la pile. Un élément `String` représente un texte
      qui peut changer et cela est rendu possible en:
      1. Créant un emplacement sur le *tas* pour le texte où il pourra être modifié
      2. Stockant une référence vers cet emplacement de mémoire (sur le *tas*) et
      en stockant cette référence dans une structure `String` (sur la *pile*). Nous reparlerons
      de cela dans de futures leçons.
    * Finalement nos deux amis *Ferris* et *Sarah* ont des structures de données
    qui auront
      toujours une position fixe en mémoire et sont donc placés sur la pile.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20animal_type%3A%20String%2C%0A%20%20%20%20name%3A%20String%2C%0A%20%20%20%20arms%3A%20i32%2C%0A%20%20%20%20legs%3A%20i32%2C%0A%20%20%20%20weapon%3A%20String%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20La%20structure%20SeaCreature%20est%20plac%C3%A9e%20sur%20la%20pile%0A%20%20%20%20let%20ferris%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20La%20structure%20String%20est%20%C3%A9galement%20sur%20la%20pile%20mais%0A%20%20%20%20%20%20%20%20%2F%2F%20maintient%20une%20r%C3%A9f%C3%A9rence%20vers%20des%20donn%C3%A9es%20sur%20le%20tas%0A%20%20%20%20%20%20%20%20animal_type%3A%20String%3A%3Afrom(%22crabe%22)%2C%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20arms%3A%202%2C%0A%20%20%20%20%20%20%20%20legs%3A%204%2C%0A%20%20%20%20%20%20%20%20weapon%3A%20String%3A%3Afrom(%22pinces%22)%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20let%20sarah%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20animal_type%3A%20String%3A%3Afrom(%22poulpe%22)%2C%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Sarah%22)%2C%0A%20%20%20%20%20%20%20%20arms%3A%208%2C%0A%20%20%20%20%20%20%20%20legs%3A%200%2C%0A%20%20%20%20%20%20%20%20weapon%3A%20String%3A%3Afrom(%22none%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20%0A%20%20%20%20println!(%0A%20%20%20%20%20%20%20%20%22%7B%7D%20est%20un%20%7B%7D.%20Ces%20derniers%20poss%C3%A8dent%20%7B%7D%20bras%2C%20%7B%7D%20jambes%2C%0A%20%20%20%20%20%20%20%20et%20utilisent%20leurs%20%7B%7D%20comme%20arme.%22%2C%0A%20%20%20%20%20%20%20%20ferris.name%2C%0A%20%20%20%20%20%20%20%20ferris.animal_type%2C%0A%20%20%20%20%20%20%20%20ferris.arms%2C%0A%20%20%20%20%20%20%20%20ferris.legs%2C%0A%20%20%20%20%20%20%20%20ferris.weapon%0A%20%20%20%20)%3B%0A%20%20%20%20println!(%0A%20%20%20%20%20%20%20%20%22%7B%7D%20est%20un%20%7B%7D.%20Ces%20derniers%20poss%C3%A8dent%20%7B%7D%20bras%2C%20et%20%7B%7D%20jambes.%0A%20%20%20%20%20%20%20%20Ils%20ne%20sont%20pas%20%C3%A9quip%C3%A9s%20d%27armes...%22%2C%0A%20%20%20%20%20%20%20%20sarah.name%2C%0A%20%20%20%20%20%20%20%20sarah.animal_type%2C%0A%20%20%20%20%20%20%20%20sarah.arms%2C%0A%20%20%20%20%20%20%20%20sarah.legs%0A%20%20%20%20)%3B%0A%7D%0A
- title: Structures sous forme de n-uplet
  content_markdown: >
    Pour être concis, tu peux créer des structures qui s'utilisent comme des
    n-uplets (en anglais tuples).
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Location(i32%2C%20i32)%3B%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20On%20cr%C3%A9e%20une%20structure%20sur%20la%20pile%0A%20%20%20%20let%20loc%20%3D%20Location(42%2C%2032)%3B%0A%20%20%20%20println!(%22%7B%7D%2C%20%7B%7D%22%2C%20loc.0%2C%20loc.1)%3B%0A%7D%0A
- title: Structures de type unitaire
  content_markdown: >
    Il n'est pas nécessaire que les structures possèdent des champs.


    Comme mentionné au Chapitre 1, une *unité* est une autre appellation pour un
    n-uplet vide `()`. 

    C'est pourquoi ce type de structure est dit *de type unitaire* (en anglais
    unit-like).


    Ce type de structure est rarement utilisé.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Location(i32%2C%20i32)%3B%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20On%20cr%C3%A9e%20une%20structure%20sur%20la%20pile%0A%20%20%20%20let%20loc%20%3D%20Location(42%2C%2032)%3B%0A%20%20%20%20println!(%22%7B%7D%2C%20%7B%7D%22%2C%20loc.0%2C%20loc.1)%3B%0A%7D%0A
- title: Enumerations
  content_markdown: >
    Les énumerations permettent de créer un nouveau type dont la valeur

    ne peut prendre uniquement celle d'un ensemble de valeurs constantes.

    On crée une énumération avec le mot clé `enum`.


    `match` aide à s'assurer que l'on a traité tous les cas d'une énumération,

    ce qui en fait un outil puissant pour assurer le maintien de la qualité de
    code.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=%23!%5Ballow(dead_code)%5D%20%2F%2F%20cette%20ligne%20supprime%20les%20warnings%20du%20compilateur%0A%0Aenum%20Species%20%7B%0A%20%20%20%20Crab%2C%0A%20%20%20%20Octopus%2C%0A%20%20%20%20Fish%2C%0A%20%20%20%20Clam%0A%7D%0A%0Astruct%20SeaCreature%20%7B%0A%20%20%20%20species%3A%20Species%2C%0A%20%20%20%20name%3A%20String%2C%0A%20%20%20%20arms%3A%20i32%2C%0A%20%20%20%20legs%3A%20i32%2C%0A%20%20%20%20weapon%3A%20String%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20ferris%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20species%3A%20Species%3A%3ACrab%2C%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20arms%3A%202%2C%0A%20%20%20%20%20%20%20%20legs%3A%204%2C%0A%20%20%20%20%20%20%20%20weapon%3A%20String%3A%3Afrom(%22claw%22)%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20match%20ferris.species%20%7B%0A%20%20%20%20%20%20%20%20Species%3A%3ACrab%20%3D%3E%20println!(%22%7B%7D%20est%20un%20crabe%22%2Cferris.name)%2C%0A%20%20%20%20%20%20%20%20Species%3A%3AOctopus%20%3D%3E%20println!(%22%7B%7D%20est%20un%20poulpe%22%2Cferris.name)%2C%0A%20%20%20%20%20%20%20%20Species%3A%3AFish%20%3D%3E%20println!(%22%7B%7D%20est%20un%20poisson%22%2Cferris.name)%2C%0A%20%20%20%20%20%20%20%20Species%3A%3AClam%20%3D%3E%20println!(%22%7B%7D%20est%20une%20palourde%22%2Cferris.name)%2C%0A%20%20%20%20%7D%0A%7D%0A
- title: Enumerations avec des données
  content_markdown: >
    Les éléments `enum` peuvent également avoir un ou plusieurs type de données

    ce qui les rend similaire au type *union* du language C.


    Lorsqu'une énumération est utilisée avec `match`, on peut lier un nom de
    variable à chaque valeur.


    Représentation des énumérations en mémoire:

    * La place mémoire qu'occupe un élément d'une énumération est égale à la
    taille de l'élément

    de l'énumération qui occupe le plus de place mémoire. Ce qui permet de
    remplacer un élément

    en mémoire par un autre sans avoir à redimensionner l'espace mémoire.

    * En plus du type de donnée de l'élément (s'il en a un), chaque élément
    possède une valeur

    numérique permettant d'identifier celui-ci.


    Autres détails:

    * Les énumérations de Rust sont également appelées *unions étiquetés* (en
    anglais tagged-unions).

    * La combinaison de types pour en créer un nouveau est ce à quoi quelqu'un
    fait référence

    lorsqu'il dit: Rust possède des types algébriques.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=%23!%5Ballow(dead_code)%5D%20%2F%2F%20cette%20ligne%20supprime%20les%20warnings%20du%20compilateur%0A%0Aenum%20Species%20%7B%20Crab%2C%20Octopus%2C%20Fish%2C%20Clam%20%7D%0Aenum%20PoisonType%20%7B%20Acidic%2C%20Painful%2C%20Lethal%20%7D%0Aenum%20Size%20%7B%20Big%2C%20Small%20%7D%0Aenum%20Weapon%20%7B%0A%20%20%20%20Claw(i32%2C%20Size)%2C%0A%20%20%20%20Poison(PoisonType)%2C%0A%20%20%20%20None%0A%7D%0A%0Astruct%20SeaCreature%20%7B%0A%20%20%20%20species%3A%20Species%2C%0A%20%20%20%20name%3A%20String%2C%0A%20%20%20%20arms%3A%20i32%2C%0A%20%20%20%20legs%3A%20i32%2C%0A%20%20%20%20weapon%3A%20Weapon%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20Les%20donn%C3%A9es%20de%20SeaCreature%20sont%20sur%20la%20pile%0A%20%20%20%20let%20ferris%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20La%20structure%20String%20est%20%C3%A9galement%20sur%20la%20pile%0A%20%20%20%20%20%20%20%20%2F%2F%20mais%20maintient%20une%20r%C3%A9f%C3%A9rence%20vers%20une%20donn%C3%A9e%20sur%20le%20tas%0A%20%20%20%20%20%20%20%20species%3A%20Species%3A%3ACrab%2C%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20arms%3A%202%2C%0A%20%20%20%20%20%20%20%20legs%3A%204%2C%0A%20%20%20%20%20%20%20%20weapon%3A%20Weapon%3A%3AClaw(2%2C%20Size%3A%3ASmall)%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20match%20ferris.species%20%7B%0A%20%20%20%20%20%20%20%20Species%3A%3ACrab%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20match%20ferris.weapon%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Weapon%3A%3AClaw(num_claws%2Csize)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20let%20size_description%20%3D%20match%20size%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Size%3A%3ABig%20%3D%3E%20%22grandes%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Size%3A%3ASmall%20%3D%3E%20%22petites%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20println!(%22ferris%20est%20un%20crabe%20avec%20%7B%7D%20%7B%7D%20pinces%22%2C%20num_claws%2C%20size_description)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%3E%20println!(%22ferris%20est%20un%20crabe%20avec%20d%27autres%20armes%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20_%20%3D%3E%20println!(%22ferris%20n%27est%20pas%20un%20crabe%22)%2C%0A%20%20%20%20%7D%0A%7D
- title: Chapitre 3 - Conclusion
  content_markdown: >
    Super! Nous possédons désormais les outils qu'il nous faut pour représenter
    nos idées avec du code. 

    Espérons que maintenant nous pouvons voir plus clairement comment les
    opérations fondamentales de Rust fonctionnent 

    en harmonie et de manière concise avec les types. Dans le prochain chapitre,
    nous parlerons d'un concept qui 

    donne à nos données encore plus de flexibilité dans leur représentation: la
    généricité.
