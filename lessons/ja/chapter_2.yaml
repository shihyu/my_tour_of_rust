- title: 第 2 章 - 基本制御フロー
  content_markdown: |
    この章では、Rustの基本的な制御フローについて説明します。
    C 系の言語に慣れていればすぐに馴染めますし、ちょっとした驚きがあるかもしれません。
- title: if/else if/else
  content_markdown: |
    Rust でのコード分岐はそれほど目新しくはありません。

    条件には括弧がありませんが、本当に必要だったでしょうか？これでコードはすっきりします。

    いつもの論理演算子が使えます: `==`, `!=`, `<`, `>`, `<=`, `>=`, `!`, `||`, `&&`
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20x%20%3D%2042%3B%0A%20%20%20%20if%20x%20%3C%2042%20%7B%0A%20%20%20%20%20%20%20%20println!(%2242%20%E3%82%88%E3%82%8A%E5%B0%8F%E3%81%95%E3%81%84%22)%3B%0A%20%20%20%20%7D%20else%20if%20x%20%3D%3D%2042%20%7B%0A%20%20%20%20%20%20%20%20println!(%2242%20%E3%81%AB%E7%AD%89%E3%81%97%E3%81%84%22)%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20println!(%2242%20%E3%82%88%E3%82%8A%E5%A4%A7%E3%81%8D%E3%81%84%22)%3B%0A%20%20%20%20%7D%0A%7D
- title: loop
  content_markdown: |
    無限ループが必要ですか？

    Rust では簡単です。

    `break` によってループから脱出できます。</p><p>後で見ますが `loop` には秘密があります。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20mut%20x%20%3D%200%3B%0A%20%20%20%20loop%20%7B%0A%20%20%20%20%20%20%20%20x%20%2B%3D%201%3B%0A%20%20%20%20%20%20%20%20if%20x%20%3D%3D%2042%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%7D%0A
- title: while
  content_markdown: |
    `while` を使えば、ループに条件を簡単に追加できます。

    条件が `false` と評価された場合、ループは終了します。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20mut%20x%20%3D%200%3B%0A%20%20%20%20while%20x%20!%3D%2042%20%7B%0A%20%20%20%20%20%20%20%20x%20%2B%3D%201%3B%0A%20%20%20%20%7D%0A%7D%0A
- title: for
  content_markdown: |
    Rust の `for` ループは強力に改良されています。
    イテレータとして評価される式を反復処理します。
    イテレータとは何でしょうか？
    イテレータとは、項目がなくなるまで「次の項目は何ですか？」と質問することができるオブジェクトです。

    それについては後の章で詳しく説明します。とりあえず、Rust では整数のシーケンスを生成するイテレータを、簡単に作成できることを知っておいてください。

    `..` 演算子は、開始番号から終了番号の手前までの数値を生成するイテレータを作成します。

    `..=` 演算子は、開始番号から終了番号までの数値を生成するイテレータを作成します。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20for%20x%20in%200..5%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20for%20x%20in%200..%3D5%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%20%20%20%20%7D%0A%7D%0A
- title: match
  content_markdown: |
    switch 文が足りない？
    Rust には、値が取り得るすべての条件にマッチさせて、マッチが真であればコードパスを実行するための、とても便利なキーワードがあります。
    これが数値に対してどのように機能するか見てみましょう。
    より複雑なデータのパターンマッチングについては、後の章で詳しく説明します。
    待つだけの価値があることをお約束します。

    `match` は網羅的なので、すべてのケースを処理しなければなりません。

    マッチングと分解を組み合わせたパターンは、Rust の中で最も一般的なパターンの一つです。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20x%20%3D%2042%3B%0A%0A%20%20%20%20match%20x%20%7B%0A%20%20%20%20%20%20%20%200%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22found%20zero%22)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20%E8%A4%87%E6%95%B0%E3%81%AE%E5%80%A4%E3%81%AB%E3%83%9E%E3%83%83%E3%83%81%0A%20%20%20%20%20%20%20%201%20%7C%202%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22found%201%20or%202!%22)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20%E7%AF%84%E5%9B%B2%E3%81%AB%E3%83%9E%E3%83%83%E3%83%81%0A%20%20%20%20%20%20%20%203..%3D9%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22found%20a%20number%203%20to%209%20inclusively%22)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20%E3%83%9E%E3%83%83%E3%83%81%E3%81%97%E3%81%9F%E6%95%B0%E5%AD%97%E3%82%92%E5%A4%89%E6%95%B0%E3%81%AB%E6%9D%9F%E7%B8%9B%0A%20%20%20%20%20%20%20%20matched_num%20%40%2010..%3D100%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22found%20%7B%7D%20number%20between%2010%20to%20100!%22%2C%20matched_num)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20%E3%81%A9%E3%81%AE%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%AB%E3%82%82%E3%83%9E%E3%83%83%E3%83%81%E3%81%97%E3%81%AA%E3%81%84%E5%A0%B4%E5%90%88%E3%81%AE%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E3%83%9E%E3%83%83%E3%83%81%E3%81%8C%E5%BF%85%E9%A0%88%0A%20%20%20%20%20%20%20%20_%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22found%20something%20else!%22)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D%0A
- title: loop から値を返す
  content_markdown: |
    `loop` は `break` で抜けて値を返すことができます。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20mut%20x%20%3D%200%3B%0A%20%20%20%20let%20v%20%3D%20loop%20%7B%0A%20%20%20%20%20%20%20%20x%20%2B%3D%201%3B%0A%20%20%20%20%20%20%20%20if%20x%20%3D%3D%2013%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20break%20%2213%20%E3%82%92%E7%99%BA%E8%A6%8B%22%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%20%20%20%20println!(%22loop%20%E3%81%AE%E6%88%BB%E3%82%8A%E5%80%A4%3A%20%7B%7D%22%2C%20v)%3B%0A%7D%0A
- title: ブロック式から値を返す
  content_markdown: |
    `if`、`match`、関数、ブロックは、単一の方法で値を返すことができます。

    `if`、`match`、関数、ブロックの最後が `;` のない式であれば、戻り値として使用されます。
    これは値を返すための簡潔なロジックを作成するのに最適な方法で、その値は新しい変数に入れることができます。

    また、`if` 文を三項演算子のように使用できることにも注目してください。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20example()%20-%3E%20i32%20%7B%0A%20%20%20%20let%20x%20%3D%2042%3B%0A%20%20%20%20%2F%2F%20Rust%20%E3%81%AE%E4%B8%89%E9%A0%85%E5%BC%8F%0A%20%20%20%20let%20v%20%3D%20if%20x%20%3C%2042%20%7B%20-1%20%7D%20else%20%7B%201%20%7D%3B%0A%20%20%20%20println!(%22if%20%E3%82%88%E3%82%8A%3A%20%7B%7D%22%2C%20v)%3B%0A%0A%20%20%20%20let%20food%20%3D%20%22%E3%83%8F%E3%83%B3%E3%83%90%E3%83%BC%E3%82%AC%E3%83%BC%22%3B%0A%20%20%20%20let%20result%20%3D%20match%20food%20%7B%0A%20%20%20%20%20%20%20%20%22%E3%83%9B%E3%83%83%E3%83%88%E3%83%89%E3%83%83%E3%82%B0%22%20%3D%3E%20%22%E3%83%9B%E3%83%83%E3%83%88%E3%83%89%E3%83%83%E3%82%B0%E3%81%A7%E3%81%99%22%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20%E5%8D%98%E4%B8%80%E3%81%AE%E5%BC%8F%E3%81%A7%E5%80%A4%E3%82%92%E8%BF%94%E3%81%99%E5%A0%B4%E5%90%88%E3%80%81%E4%B8%AD%E6%8B%AC%E5%BC%A7%E3%81%AF%E7%9C%81%E7%95%A5%E5%8F%AF%E8%83%BD%0A%20%20%20%20%20%20%20%20_%20%3D%3E%20%22%E3%83%9B%E3%83%83%E3%83%88%E3%83%89%E3%83%83%E3%82%B0%E3%81%A7%E3%81%AF%E3%81%82%E3%82%8A%E3%81%BE%E3%81%9B%E3%82%93%22%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20println!(%22%E9%A3%9F%E5%93%81%E3%81%AE%E8%AD%98%E5%88%A5%3A%20%7B%7D%22%2C%20result)%3B%0A%0A%20%20%20%20let%20v%20%3D%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%81%AE%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%97%E3%81%AF%E9%96%A2%E6%95%B0%E3%81%AE%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%97%E3%81%8B%E3%82%89%E5%88%86%E9%9B%A2%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%0A%20%20%20%20%20%20%20%20let%20a%20%3D%201%3B%0A%20%20%20%20%20%20%20%20let%20b%20%3D%202%3B%0A%20%20%20%20%20%20%20%20a%20%2B%20b%0A%20%20%20%20%7D%3B%0A%20%20%20%20println!(%22%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%82%88%E3%82%8A%3A%20%7B%7D%22%2C%20v)%3B%0A%0A%20%20%20%20%2F%2F%20Rust%20%E3%81%A7%E9%96%A2%E6%95%B0%E3%81%AE%E6%9C%80%E5%BE%8C%E3%81%8B%E3%82%89%E5%80%A4%E3%82%92%E8%BF%94%E3%81%99%E6%85%A3%E7%94%A8%E7%9A%84%E3%81%AA%E6%96%B9%E6%B3%95%0A%20%20%20%20v%20%2B%204%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20println!(%22%E9%96%A2%E6%95%B0%E3%82%88%E3%82%8A%3A%20%7B%7D%22%2C%20example())%3B%0A%7D%0A
- title: 第 2 章 - まとめ
  content_markdown: |
    基本的な言語機能においても、Rust の力を垣間見ることができたでしょうか。
    今後は `for` と `match` について、その能力を活用できるように知識を深めながら、進めていきます。
    次回は Rust の基礎となるデータ構造に入ります。
