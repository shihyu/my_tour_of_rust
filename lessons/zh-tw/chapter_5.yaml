- title: 第五章 - 所有權和數據借用
  content_markdown: >
    相較於其他編程語言，Rust 具有一套獨特的內存管理範例。為了不讓您被概念性的東西淹沒，我們將一一展示這些編譯器的行為和驗證方式。
    有一點很重要：所有這些規則的終極目的不是為了為難您，而是為了更好地降低代碼的出錯率！
- title: 所有權
  content_markdown: >
    實例化一個類型並且將其**綁定**到變量名上將會創建一些內存資源，而這些內存資源將會在其整個**生命週期**中被 Rust 編譯器檢驗。
    被綁定的變量即為該資源的**所有者**。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20%E6%88%91%E4%BB%AC%E5%AE%9E%E4%BE%8B%E5%8C%96%E8%BF%99%E4%B8%AA%E7%BB%93%E6%9E%84%E4%BD%93%E5%B9%B6%E5%B0%86%E5%85%B6%E7%BB%91%E5%AE%9A%E5%88%B0%E5%85%B7%E4%BD%93%E7%9A%84%E5%8F%98%E9%87%8F%E4%B8%8A%0A%20%20%20%20%2F%2F%20%E6%9D%A5%E5%88%9B%E5%BB%BA%E5%86%85%E5%AD%98%E8%B5%84%E6%BA%90%0A%20%20%20%20let%20foo%20%3D%20Foo%20%7B%20x%3A%2042%20%7D%3B%0A%20%20%20%20%2F%2F%20foo%20%E5%8D%B3%E4%B8%BA%E8%AF%A5%E8%B5%84%E6%BA%90%E7%9A%84%E6%89%80%E6%9C%89%E8%80%85%0A%7D%0A
- title: 基於域的資源管理
  content_markdown: >
    Rust 將使用資源最後被使用的位置或者一個函數域的結束來作為資源被析構和釋放的地方。
    此處析構和釋放的概念被稱之為 **drop**（丟棄）。


    內存細節：

    * Rust 沒有垃圾回收機制。

    * 在 C++ 中，這被也稱為“資源獲取即初始化“（RAII）。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20foo_a%20%3D%20Foo%20%7B%20x%3A%2042%20%7D%3B%0A%20%20%20%20let%20foo_b%20%3D%20Foo%20%7B%20x%3A%2013%20%7D%3B%0A%0A%20%20%20%20println!(%22%7B%7D%22%2C%20foo_a.x)%3B%0A%20%20%20%20%2F%2F%20foo_a%20%E5%B0%86%E5%9C%A8%E8%BF%99%E9%87%8C%E8%A2%AB%20dropped%20%E5%9B%A0%E4%B8%BA%E5%85%B6%E5%9C%A8%E8%BF%99%E4%B9%8B%E5%90%8E%E5%86%8D%E4%B9%9F%E6%B2%A1%E6%9C%89%E8%A2%AB%E4%BD%BF%E7%94%A8%0A%0A%20%20%20%20println!(%22%7B%7D%22%2C%20foo_b.x)%3B%0A%20%20%20%20%2F%2F%20foo_b%20%E5%B0%86%E5%9C%A8%E8%BF%99%E9%87%8C%E8%A2%AB%20dropped%20%E5%9B%A0%E4%B8%BA%E8%BF%99%E6%98%AF%E5%87%BD%E6%95%B0%E5%9F%9F%E7%9A%84%E7%BB%93%E5%B0%BE%0A%7D%0A
- title: 釋放是分級進行的
  content_markdown: >
    刪除一個結構體時，結構體本身會先被釋放，緊接著才分別釋放相應的子結構體並以此類推。


    內存細節：

    * Rust 通過自動釋放內存來幫助確保減少內存洩漏。

    * 每個內存資源僅會被釋放一次。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Bar%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0Astruct%20Foo%20%7B%0A%20%20%20%20bar%3A%20Bar%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20foo%20%3D%20Foo%20%7B%20bar%3A%20Bar%20%7B%20x%3A%2042%20%7D%20%7D%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20foo.bar.x)%3B%0A%20%20%20%20%2F%2F%20foo%20%E9%A6%96%E5%85%88%E8%A2%AB%20dropped%20%E9%87%8A%E6%94%BE%0A%20%20%20%20%2F%2F%20%E7%B4%A7%E6%8E%A5%E7%9D%80%E6%98%AF%20foo.bar%0A%7D%0A
- title: 移交所有權
  content_markdown: >
    將所有者作為參數傳遞給函數時，其所有權將移交至該函數的參數。
    在一次**移動**後，原函數中的變量將無法再被使用。


    內存細節:

    * 在**移動**期間，所有者的堆棧值將會被複制到函數調用的參數堆棧中。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0Afn%20do_something(f%3A%20Foo)%20%7B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20f.x)%3B%0A%20%20%20%20%2F%2F%20f%20%E5%9C%A8%E8%BF%99%E9%87%8C%E8%A2%AB%20dropped%20%E9%87%8A%E6%94%BE%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20foo%20%3D%20Foo%20%7B%20x%3A%2042%20%7D%3B%0A%20%20%20%20%2F%2F%20foo%20%E8%A2%AB%E7%A7%BB%E4%BA%A4%E8%87%B3%20do_something%0A%20%20%20%20do_something(foo)%3B%0A%20%20%20%20%2F%2F%20%E6%AD%A4%E5%90%8E%20foo%20%E4%BE%BF%E6%97%A0%E6%B3%95%E5%86%8D%E8%A2%AB%E4%BD%BF%E7%94%A8%0A%7D%0A
- title: 歸還所有權
  content_markdown: |
    所有權也可以從一個函數中被歸還。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0Afn%20do_something()%20-%3E%20Foo%20%7B%0A%20%20%20%20Foo%20%7B%20x%3A%2042%20%7D%0A%20%20%20%20%2F%2F%20%E6%89%80%E6%9C%89%E6%9D%83%E8%A2%AB%E7%A7%BB%E5%87%BA%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20foo%20%3D%20do_something()%3B%0A%20%20%20%20%2F%2F%20foo%20%E6%88%90%E4%B8%BA%E4%BA%86%E6%89%80%E6%9C%89%E8%80%85%0A%20%20%20%20%2F%2F%20foo%20%E5%9C%A8%E5%87%BD%E6%95%B0%E5%9F%9F%E7%BB%93%E5%B0%BE%E8%A2%AB%20dropped%20%E9%87%8A%E6%94%BE%0A%7D%0A
- title: 使用引用借用所有權
  content_markdown: |
    引用允許我們通過 `&` 操作符來借用對一個資源的訪問權限。
    引用也會如同其他資源一樣被釋放。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20foo%20%3D%20Foo%20%7B%20x%3A%2042%20%7D%3B%0A%20%20%20%20let%20f%20%3D%20%26foo%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20f.x)%3B%0A%20%20%20%20%2F%2F%20f%20%E5%9C%A8%E8%BF%99%E9%87%8C%E8%A2%AB%20dropped%20%E9%87%8A%E6%94%BE%0A%20%20%20%20%2F%2F%20foo%20%E5%9C%A8%E8%BF%99%E9%87%8C%E8%A2%AB%20dropped%20%E9%87%8A%E6%94%BE%0A%7D%0A
- title: 通過引用借用可變所有權
  content_markdown: >
    我們也可以使用 `&mut` 操作符來借用對一個資源的可變訪問權限。
    在發生了可變借用後，一個資源的所有者便不可以再次被借用或者修改。


    內存細節：

    * Rust 之所以要避免同時存在兩種可以改變所擁有變量值的方式，是因為此舉可能會導致潛在的數據爭用（data race）。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0Afn%20do_something(f%3A%20Foo)%20%7B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20f.x)%3B%0A%20%20%20%20%2F%2F%20f%20%E5%9C%A8%E8%BF%99%E9%87%8C%E8%A2%AB%20dropped%20%E9%87%8A%E6%94%BE%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20mut%20foo%20%3D%20Foo%20%7B%20x%3A%2042%20%7D%3B%0A%20%20%20%20let%20f%20%3D%20%26mut%20foo%3B%0A%0A%20%20%20%20%2F%2F%20%E4%BC%9A%E6%8A%A5%E9%94%99%3A%20do_something(foo)%3B%0A%20%20%20%20%2F%2F%20%E5%9B%A0%E4%B8%BA%20foo%20%E5%B7%B2%E7%BB%8F%E8%A2%AB%E5%8F%AF%E5%8F%98%E5%80%9F%E7%94%A8%E8%80%8C%E6%97%A0%E6%B3%95%E5%8F%96%E5%BE%97%E5%85%B6%E6%89%80%E6%9C%89%E6%9D%83%0A%0A%20%20%20%20%2F%2F%20%E4%BC%9A%E6%8A%A5%E9%94%99%3A%20foo.x%20%3D%2013%3B%0A%20%20%20%20%2F%2F%20%E5%9B%A0%E4%B8%BA%20foo%20%E5%B7%B2%E7%BB%8F%E8%A2%AB%E5%8F%AF%E5%8F%98%E5%80%9F%E7%94%A8%E8%80%8C%E6%97%A0%E6%B3%95%E8%A2%AB%E4%BF%AE%E6%94%B9%0A%0A%20%20%20%20f.x%20%3D%2013%3B%0A%20%20%20%20%2F%2F%20f%20%E4%BC%9A%E5%9B%A0%E4%B8%BA%E6%AD%A4%E5%90%8E%E4%B8%8D%E5%86%8D%E8%A2%AB%E4%BD%BF%E7%94%A8%E8%80%8C%E8%A2%AB%20dropped%20%E9%87%8A%E6%94%BE%0A%20%20%20%20%0A%20%20%20%20println!(%22%7B%7D%22%2C%20foo.x)%3B%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20%E7%8E%B0%E5%9C%A8%E4%BF%AE%E6%94%B9%E5%8F%AF%E4%BB%A5%E6%AD%A3%E5%B8%B8%E8%BF%9B%E8%A1%8C%E5%9B%A0%E4%B8%BA%E5%85%B6%E6%89%80%E6%9C%89%E5%8F%AF%E5%8F%98%E5%BC%95%E7%94%A8%E5%B7%B2%E7%BB%8F%E8%A2%AB%20dropped%20%E9%87%8A%E6%94%BE%0A%20%20%20%20foo.x%20%3D%207%3B%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20%E7%A7%BB%E5%8A%A8%20foo%20%E7%9A%84%E6%89%80%E6%9C%89%E6%9D%83%E5%88%B0%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E4%B8%AD%0A%20%20%20%20do_something(foo)%3B%0A%7D%0A
- title: 解引用
  content_markdown: >
    使用 `&mut` 引用時, 你可以通過 `*` 操作符來修改其指向的值。
    你也可以使用 `*` 操作符來對所擁有的值進行拷貝（前提是該值可以被拷貝——我們將會在後續章節中討論可拷貝類型）。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20mut%20foo%20%3D%2042%3B%0A%20%20%20%20let%20f%20%3D%20%26mut%20foo%3B%0A%20%20%20%20let%20bar%20%3D%20*f%3B%20%2F%2F%20%E5%8F%96%E5%BE%97%E6%89%80%E6%9C%89%E8%80%85%E5%80%BC%E7%9A%84%E6%8B%B7%E8%B4%9D%0A%20%20%20%20*f%20%3D%2013%3B%20%20%20%20%20%20%2F%2F%20%E8%AE%BE%E7%BD%AE%E5%BC%95%E7%94%A8%E6%89%80%E6%9C%89%E8%80%85%E7%9A%84%E5%80%BC%0A%20%20%20%20println!(%22%7B%7D%22%2C%20bar)%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20foo)%3B%0A%7D%0A
- title: 傳遞借用的數據
  content_markdown: >
    Rust 對於引用的規則也許最好用以下的方式總結：

    * Rust 只允許同時存在一個可變引用**或者**多個不可變引用，**不允許可變引用和不可變引用同時存在**。

    * 一個引用永遠也不會比它的所有者存活得更久。


    而在函數間進行引用的傳遞時，以上這些通常都不會成為問題。


    內存細節：

    * 上面的第一條規則避免了數據爭用的出現。什麼是數據爭用？在對數據進行讀取的時候，數據爭用可能會因為同時存在對數據的寫入而產生不同步。這一點往往會出現在多線程編程中。

    * 而第二條引用規則則避免了通過引用而錯誤的訪問到不存在的數據（在 C 語言中被稱之為懸垂指針）。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0Afn%20do_something(f%3A%20%26mut%20Foo)%20%7B%0A%20%20%20%20f.x%20%2B%3D%201%3B%0A%20%20%20%20%2F%2F%20%E5%8F%AF%E5%8F%98%E5%BC%95%E7%94%A8%20f%20%E5%9C%A8%E8%BF%99%E9%87%8C%E8%A2%AB%20dropped%20%E9%87%8A%E6%94%BE%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20mut%20foo%20%3D%20Foo%20%7B%20x%3A%2042%20%7D%3B%0A%20%20%20%20do_something(%26mut%20foo)%3B%0A%20%20%20%20%2F%2F%20%E5%9B%A0%E4%B8%BA%E6%89%80%E6%9C%89%E7%9A%84%E5%8F%AF%E5%8F%98%E5%BC%95%E7%94%A8%E9%83%BD%E5%9C%A8%20do_something%20%E5%87%BD%E6%95%B0%E5%86%85%E9%83%A8%E8%A2%AB%E9%87%8A%E6%94%BE%E4%BA%86%0A%20%20%20%20%2F%2F%20%E6%AD%A4%E6%97%B6%E6%88%91%E4%BB%AC%E4%BE%BF%E5%8F%AF%E4%BB%A5%E5%86%8D%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%0A%20%20%20%20do_something(%26mut%20foo)%3B%0A%20%20%20%20%2F%2F%20foo%20%E5%9C%A8%E8%BF%99%E9%87%8C%E8%A2%AB%20dropped%20%E9%87%8A%E6%94%BE%0A%7D%0A
- title: 引用的引用
  content_markdown: |
    引用甚至也可以用在其他引用上。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0Afn%20do_something(a%3A%20%26Foo)%20-%3E%20%26i32%20%7B%0A%20%20%20%20return%20%26a.x%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20mut%20foo%20%3D%20Foo%20%7B%20x%3A%2042%20%7D%3B%0A%20%20%20%20let%20x%20%3D%20%26mut%20foo.x%3B%0A%20%20%20%20*x%20%3D%2013%3B%0A%20%20%20%20%2F%2F%20x%20%E5%9C%A8%E8%BF%99%E9%87%8C%E8%A2%AB%20dropped%20%E9%87%8A%E6%94%BE%E4%BB%8E%E8%80%8C%E5%85%81%E8%AE%B8%E6%88%91%E4%BB%AC%E5%86%8D%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%BC%95%E7%94%A8%0A%20%20%20%20let%20y%20%3D%20do_something(%26foo)%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20y)%3B%0A%20%20%20%20%2F%2F%20y%20%E5%9C%A8%E8%BF%99%E9%87%8C%E8%A2%AB%20dropped%20%E9%87%8A%E6%94%BE%0A%20%20%20%20%2F%2F%20foo%20%E5%9C%A8%E8%BF%99%E9%87%8C%E8%A2%AB%20dropped%20%E9%87%8A%E6%94%BE%0A%7D%0A
- title: 顯式生命週期
  content_markdown: >
    儘管 Rust 不總是在代碼中將它展示出來，但編譯器會理解每一個變量的生命週期並進行驗證以確保一個引用不會有長於其所有者的存在時間。
    同時，函數可以通過使用一些符號來參數化函數簽名，以幫助界定哪些參數和返回值共享同一生命週期。
    生命週期註解總是以 `'` 開頭，例如 `'a`，`'b` 以及 `'c`。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0A%2F%2F%20%E5%8F%82%E6%95%B0%20foo%20%E5%92%8C%E8%BF%94%E5%9B%9E%E5%80%BC%E5%85%B1%E4%BA%AB%E5%90%8C%E4%B8%80%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%0Afn%20do_something%3C'a%3E(foo%3A%20%26'a%20Foo)%20-%3E%20%26'a%20i32%20%7B%0A%20%20%20%20return%20%26foo.x%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20mut%20foo%20%3D%20Foo%20%7B%20x%3A%2042%20%7D%3B%0A%20%20%20%20let%20x%20%3D%20%26mut%20foo.x%3B%0A%20%20%20%20*x%20%3D%2013%3B%0A%20%20%20%20%2F%2F%20x%20%E5%9C%A8%E8%BF%99%E9%87%8C%E8%A2%AB%20dropped%20%E9%87%8A%E6%94%BE%E4%BB%8E%E8%80%8C%E5%85%81%E8%AE%B8%E6%88%91%E4%BB%AC%E5%86%8D%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%BC%95%E7%94%A8%0A%20%20%20%20let%20y%20%3D%20do_something(%26foo)%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20y)%3B%0A%20%20%20%20%2F%2F%20y%20%E5%9C%A8%E8%BF%99%E9%87%8C%E8%A2%AB%20dropped%20%E9%87%8A%E6%94%BE%0A%20%20%20%20%2F%2F%20foo%20%E5%9C%A8%E8%BF%99%E9%87%8C%E8%A2%AB%20dropped%20%E9%87%8A%E6%94%BE%0A%7D%0A
- title: 多個生命週期
  content_markdown: >
    生命週期註解可以通過區分函數簽名中不同部分的生命週期，來允許我們顯式地明確某些編譯器靠自己無法解決的場景。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%20%7B%0A%20%20%20%20x%3A%20i32%2C%0A%7D%0A%0A%2F%2F%20foo_b%20%E5%92%8C%E8%BF%94%E5%9B%9E%E5%80%BC%E5%85%B1%E4%BA%AB%E5%90%8C%E4%B8%80%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%0A%2F%2F%20foo_a%20%E5%88%99%E6%8B%A5%E6%9C%89%E5%8F%A6%E4%B8%80%E4%B8%AA%E4%B8%8D%E7%9B%B8%E5%85%B3%E8%81%94%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%0Afn%20do_something%3C'a%2C%20'b%3E(foo_a%3A%20%26'a%20Foo%2C%20foo_b%3A%20%26'b%20Foo)%20-%3E%20%26'b%20i32%20%7B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20foo_a.x)%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20foo_b.x)%3B%0A%20%20%20%20return%20%26foo_b.x%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20foo_a%20%3D%20Foo%20%7B%20x%3A%2042%20%7D%3B%0A%20%20%20%20let%20foo_b%20%3D%20Foo%20%7B%20x%3A%2012%20%7D%3B%0A%20%20%20%20let%20x%20%3D%20do_something(%26foo_a%2C%20%26foo_b)%3B%0A%20%20%20%20%2F%2F%20foo_a%20%E5%9C%A8%E8%BF%99%E9%87%8C%E8%A2%AB%20dropped%20%E9%87%8A%E6%94%BE%E5%9B%A0%E4%B8%BA%E5%8F%AA%E6%9C%89%20foo_b%20%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9C%A8%E6%AD%A4%E4%B9%8B%E5%90%8E%E8%BF%98%E5%9C%A8%E5%BB%B6%E7%BB%AD%0A%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%20%20%20%20%2F%2F%20x%20%E5%9C%A8%E8%BF%99%E9%87%8C%E8%A2%AB%20dropped%20%E9%87%8A%E6%94%BE%0A%20%20%20%20%2F%2F%20foo_b%20%E5%9C%A8%E8%BF%99%E9%87%8C%E8%A2%AB%20dropped%20%E9%87%8A%E6%94%BE%0A%7D%0A
- title: 靜態生命週期
  content_markdown: >
    一個**靜態**變量是一個在編譯期間即被創建並存在於整個程序始末的內存資源。他們必須被明確指定類型。
    一個**靜態生命週期**是指一段內存資源無限期地延續到程序結束。需要注意的一點是，在此定義之下，一些靜態生命週期的資源也可以在運行時被創建。
    擁有靜態生命週期的資源會擁有一個特殊的生命週期註解 `'static`。
    `'static` 資源永遠也不會被 **drop** 釋放。
    如果靜態生命週期資源包含了引用，那麼這些引用的生命週期也一定是 `'static` 的。（任何缺少了此註解的引用都不會達到同樣長的存活時間）


    內存細節：

    * 因為靜態變量可以全局性地被任何人訪問讀取而潛在地引入數據爭用，所以修改它具有內在的危險性。我們會在稍後討論使用全局數據的一些挑戰。

    * Rust 允許使用 `unsafe { ... }` 代碼塊來進行一些無法被編譯器擔保的內存操作。The [<span
    style="color:red; font-weight:
    bold;">R̸͉̟͈͔̄͛̾̇͜U̶͓͖͋̅Ṡ̴͉͇̃̉̀T̵̻̻͔̟͉́͆Ơ̷̥̟̳̓͝N̶̨̼̹̲͛Ö̵̝͉̖̏̾̔M̶̡̠̺̠̐͜Î̷̛͓̣̃̐̏C̸̥̤̭̏͛̎͜O̶̧͚͖͔̊͗̇͠N̸͇̰̏̏̽̃</span>](https://doc.rust-lang.org/nomicon/)（常見的中文翻譯為：Rust 死靈書）在討論時應該被嚴肅地看待，
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=static%20PI%3A%20f64%20%3D%203.1415%3B%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E7%9A%84%E8%8C%83%E5%9B%B4%E4%B9%9F%E5%8F%AF%E4%BB%A5%E8%A2%AB%E9%99%90%E5%88%B6%E5%9C%A8%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E5%86%85%0A%20%20%20%20static%20mut%20SECRET%3A%20%26'static%20str%20%3D%20%22swordfish%22%3B%0A%0A%20%20%20%20%2F%2F%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E9%9D%A2%E5%80%BC%E6%8B%A5%E6%9C%89%20'static%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%0A%20%20%20%20let%20msg%3A%20%26'static%20str%20%3D%20%22Hello%20World!%22%3B%0A%20%20%20%20let%20p%3A%20%26'static%20f64%20%3D%20%26PI%3B%0A%20%20%20%20println!(%22%7B%7D%20%7B%7D%22%2C%20msg%2C%20p)%3B%0A%0A%20%20%20%20%2F%2F%20%E4%BD%A0%E5%8F%AF%E4%BB%A5%E6%89%93%E7%A0%B4%E4%B8%80%E4%BA%9B%E8%A7%84%E5%88%99%EF%BC%8C%E4%BD%86%E6%98%AF%E5%BF%85%E9%A1%BB%E6%98%AF%E6%98%BE%E5%BC%8F%E5%9C%B0%0A%20%20%20%20unsafe%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E4%BF%AE%E6%94%B9%20SECRET%20%E5%88%B0%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E9%9D%A2%E5%80%BC%E5%9B%A0%E4%B8%BA%E5%85%B6%E5%90%8C%E6%A0%B7%E6%98%AF%20'static%20%E7%9A%84%0A%20%20%20%20%20%20%20%20SECRET%20%3D%20%22abracadabra%22%3B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20SECRET)%3B%0A%20%20%20%20%7D%0A%7D%0A
- title: 數據類型中的生命週期
  content_markdown: >
    和函數相同，數據類型也可以用生命週期註解來參數化其成員。
    Rust 會驗證引用所包含的數據結構永遠也不會比引用指向的所有者存活週期更長。
    我們不能在運行中擁有一個包括指向虛無的引用結構存在！
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Foo%3C'a%3E%20%7B%0A%20%20%20%20i%3A%26'a%20i32%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20x%20%3D%2042%3B%0A%20%20%20%20let%20foo%20%3D%20Foo%20%7B%0A%20%20%20%20%20%20%20%20i%3A%20%26x%0A%20%20%20%20%7D%3B%0A%20%20%20%20println!(%22%7B%7D%22%2Cfoo.i)%3B%0A%7D%0A
- title: 第五章 - 總結
  content_markdown: >
    哇，恭喜您成功走完了本章！我知道這下可能會有很多需要吸收的東西，但是您已經在成為一名 Rustacean 的路上走得很好了。希望您能愈發清晰地認識到 Rust 是如何致力於解決系統編程中的諸多常見挑戰：

    * 無意間對資源的修改

    * 忘記及時地釋放資源

    * 資源意外地被釋放兩次

    * 在資源被釋放後使用了它

    * 由於讀取數據的同時有其他人正在向資源中寫入數據而引起的數據爭用

    * 在編譯器無法做擔保時，清晰看到代碼的作用域


    在下一章中，我們會研究一些 Rust 如何處理文本的相關知識。
