- title: 第一章 - 基礎知識
  content_markdown: |
    在第一章中，我們將探討函數、變量和最基本的類型等基礎知識。歡迎入坑！

    並且~以防你好奇這個跟你說話的螃蟹是誰，我叫 **Ferris**，一個非官方的 Rust 語言吉祥物。
    很高興能認識你！
- title: Rust 練習場
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20println!(%22%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E7%BB%83%E4%B9%A0%E5%9C%BA%EF%BC%81%E4%BD%A0%E5%8F%AF%E4%BB%A5%E4%BF%AE%E6%94%B9%E8%BF%99%E5%84%BF%E7%9A%84%E4%BB%A3%E7%A0%81%E3%80%82%22)%3B%0A%7D%0A
  content_markdown: |
    本教程使用的是來自 [Rust 練習場](https://play.rust-lang.org) 的交互代碼工具。

    這是一個玩轉 Rust 並且向別人展示你的創造和挑戰的最好工具。
- title: 變量
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20%2F%2F%20rust%20%E6%8E%A8%E6%96%AD%E5%87%BAx%E7%9A%84%E7%B1%BB%E5%9E%8B%0A%20%20%20%20let%20x%20%3D%2013%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%0A%20%20%20%20%2F%2F%20rust%E4%B9%9F%E5%8F%AF%E4%BB%A5%E6%98%BE%E5%BC%8F%E5%A3%B0%E6%98%8E%E7%B1%BB%E5%9E%8B%0A%20%20%20%20let%20x%3A%20f64%20%3D%203.14159%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%0A%20%20%20%20%2F%2F%20rust%20%E4%B9%9F%E6%94%AF%E6%8C%81%E5%85%88%E5%A3%B0%E6%98%8E%E5%90%8E%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%8C%E4%BD%86%E5%BE%88%E5%B0%91%E8%BF%99%E6%A0%B7%E5%81%9A%0A%20%20%20%20let%20x%3B%0A%20%20%20%20x%20%3D%200%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%7D%0A
  content_markdown: |
    變量使用 **let** 關鍵字來聲明。

    在賦值時，Rust 能夠在 99% 的情況下自動推斷其類型。如果不能，你也可以手動將類型添加到變量聲明中。

    你也許注意到了，我們可以對同一個變量名進行多次賦值。這就是所謂的變量隱藏，可以更改變量類型以實現對該變量名的後續使用。

    變量名總是遵循 `蛇形命名法` (snake_case)。
- title: 修改變量
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20mut%20x%20%3D%2042%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%20%20%20%20x%20%3D%2013%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%7D%0A
  content_markdown: |
    Rust 非常關心哪些變量是可修改的。值分為兩種類型：

    * **可變的** - 編譯器允許對變量進行讀取和寫入。
    * **不可變的** - 編譯器只允許對變量進行讀取。

    可變值用 **mut** 關鍵字表示。

    關於這個概念，我們之後還會有更多的內容，但是眼下請謹記這個關鍵字即可。
- title: 基本類型
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20x%20%3D%2012%3B%20%2F%2F%20%E9%BB%98%E8%AE%A4%E6%83%85%E5%86%B5%E4%B8%8B%EF%BC%8C%E8%BF%99%E6%98%AFi32%0A%20%20%20%20let%20a%20%3D%2012u8%3B%0A%20%20%20%20let%20b%20%3D%204.3%3B%20%2F%2F%20%E9%BB%98%E8%AE%A4%E6%83%85%E5%86%B5%E4%B8%8B%EF%BC%8C%E8%BF%99%E6%98%AFf64%0A%20%20%20%20let%20c%20%3D%204.3f32%3B%0A%20%20%20%20let%20bv%20%3D%20true%3B%0A%20%20%20%20let%20t%20%3D%20(13%2C%20false)%3B%0A%20%20%20%20let%20sentence%20%3D%20%22hello%20world!%22%3B%0A%20%20%20%20println!(%0A%20%20%20%20%20%20%20%20%22%7B%7D%20%7B%7D%20%7B%7D%20%7B%7D%20%7B%7D%20%7B%7D%20%7B%7D%20%7B%7D%22%2C%0A%20%20%20%20%20%20%20%20x%2C%20a%2C%20b%2C%20c%2C%20bv%2C%20t.0%2C%20t.1%2C%20sentence%0A%20%20%20%20)%3B%0A%7D%0A
  content_markdown: |
    Rust 有多種常見的類型：

    * 布爾型 - `bool` 表示 true 或 false
    * 無符號整型- `u8` `u32` `u64` `u128` 表示正整數
    * 有符號整型 - `i8` `i32` `i64` `i128` 表示正負整數
    * 指針大小的整數 - `usize` `isize` 表示內存中內容的索引和大小
    * 浮點數 - `f32` `f64`
    * 元組（tuple） - `(value, value, ...)` 用於在棧上傳遞固定序列的值
    * 數組 - 在編譯時已知的具有固定長度的相同元素的集合
    * 切片（slice） - 在運行時已知長度的相同元素的集合
    * `str`(string slice) - 在運行時已知長度的文本

    文本可能比你在其他語言中學到的更復雜，因為 Rust 是一種系統編程語言，它關心的是你可能不太習慣的內存問題。
    我們之後將詳細討論這個問題。

    另外，你也可以通過將類型附加到數字的末尾來明確指定數字類型（如 `13u32` 和 `2u8`）
- title: 基本類型轉換
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20a%20%3D%2013u8%3B%0A%20%20%20%20let%20b%20%3D%207u32%3B%0A%20%20%20%20let%20c%20%3D%20a%20as%20u32%20%2B%20b%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20c)%3B%0A%0A%20%20%20%20let%20t%20%3D%20true%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20t%20as%20u8)%3B%0A%7D%0A
  content_markdown: |
    當涉及到數字類型時，Rust 要求明確。一個人不能想當然地把“u8”用在“u32”上而不出錯。

    幸運的是，使用 **as** 關鍵字，Rust 使數字類型轉換非常容易。
- title: 常量
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=const%20PI%3A%20f32%20%3D%203.14159%3B%0A%0Afn%20main()%20%7B%0A%20%20%20%20println!(%0A%20%20%20%20%20%20%20%20%22To%20make%20an%20apple%20%7B%7D%20from%20scratch%2C%20you%20must%20first%20create%20a%20universe.%22%2C%0A%20%20%20%20%20%20%20%20PI%0A%20%20%20%20)%3B%0A%7D%0A
  content_markdown: |
    常量允許我們高效地指定一個在代碼中會被多次使用的公共值。不同於像變量一樣在使用的時候會被複制，常量會在編譯期間直接用它們的值來替換變量的文本標識符。

    不同於變量，常量必須始終具有顯式的類型。

    常量名總是遵循 `全大寫蛇形命名法（SCREAMING_SNAKE_CASE）`。
- title: 數組
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20nums%3A%20%5Bi32%3B%203%5D%20%3D%20%5B1%2C%202%2C%203%5D%3B%0A%20%20%20%20println!(%22%7B%3A%3F%7D%22%2C%20nums)%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20nums%5B1%5D)%3B%0A%7D%0A
  content_markdown: |
    *數組*是所有相同類型數據元素的固定長度集合。

    一個*數組*的數據類型是 `[T;N]`，其中 T 是元素的類型，N 是編譯時已知的固定長度。

    可以使用 `[x]` 運算符提取單個元素，其中 *x* 是所需元素的 *usize* 索引（從 0 開始）。
- title: 函數
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20add(x%3A%20i32%2C%20y%3A%20i32)%20-%3E%20i32%20%7B%0A%20%20%20%20return%20x%20%2B%20y%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20add(42%2C%2013))%3B%0A%7D%0A
  content_markdown: |
    函數可以有 0 個或者多個參數。

    在這個例子中，add 接受類型為 `i32`（32 位長度的整數）的兩個參數。

    函數名總是遵循 `蛇形命名法` (snake_case)。
- title: 多個返回值
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20swap(x%3A%20i32%2C%20y%3A%20i32)%20-%3E%20(i32%2C%20i32)%20%7B%0A%20%20%20%20return%20(y%2C%20x)%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AA%E5%85%83%E7%BB%84%0A%20%20%20%20let%20result%20%3D%20swap(123%2C%20321)%3B%0A%20%20%20%20println!(%22%7B%7D%20%7B%7D%22%2C%20result.0%2C%20result.1)%3B%0A%0A%20%20%20%20%2F%2F%20%E5%B0%86%E5%85%83%E7%BB%84%E8%A7%A3%E6%9E%84%E4%B8%BA%E4%B8%A4%E4%B8%AA%E5%8F%98%E9%87%8F%0A%20%20%20%20let%20(a%2C%20b)%20%3D%20swap(result.0%2C%20result.1)%3B%0A%20%20%20%20println!(%22%7B%7D%20%7B%7D%22%2C%20a%2C%20b)%3B%0A%7D%0A
  content_markdown: |
    函數可以通過**元組**來返回多個值。

    元組元素可以通過他們的索引來獲取。

    Rust 允許我們將後續會看到的各種形式的解構，也允許我們以符合邏輯的方式提取數據結構的子片段。敬請期待後面的內容！
- title: 返回空值
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20make_nothing()%20-%3E%20()%20%7B%0A%20%20%20%20return%20()%3B%0A%7D%0A%0A%2F%2F%20%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B%E9%9A%90%E5%90%AB%E4%B8%BA%20()%0Afn%20make_nothing2()%20%7B%0A%20%20%20%20%2F%2F%20%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E6%8C%87%E5%AE%9A%E8%BF%94%E5%9B%9E%E5%80%BC%EF%BC%8C%E8%BF%99%E4%B8%AA%E5%87%BD%E6%95%B0%E5%B0%86%E4%BC%9A%E8%BF%94%E5%9B%9E%20()%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20a%20%3D%20make_nothing()%3B%0A%20%20%20%20let%20b%20%3D%20make_nothing2()%3B%0A%0A%20%20%20%20%2F%2F%20%E6%89%93%E5%8D%B0a%E5%92%8Cb%E7%9A%84debug%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%BE%88%E9%9A%BE%E5%8E%BB%E6%89%93%E5%8D%B0%E7%A9%BA%0A%20%20%20%20println!(%22The%20value%20of%20a%3A%20%7B%3A%3F%7D%22%2C%20a)%3B%0A%20%20%20%20println!(%22The%20value%20of%20b%3A%20%7B%3A%3F%7D%22%2C%20b)%3B%0A%7D%0A
  content_markdown: |
    如果沒有為函數指定返回類型，它將返回一個空的元組，也稱為*單元*。

    一個空的元組用 `()` 表示。

    直接使用 `()` 的情況相當不常見。但它經常會出現（比如作為函數返回值），所以瞭解其來龍去脈非常重要。
- title: 第一章總結
  content_markdown: |
    到目前為止一切都進展順利！ Rust 的基礎知識還不賴，對吧？ 我們一起窺探了 Rust 編譯器是如何思考的。
    作為一種系統編程語言，它非常關心內存中值的大小，是否可以修改內容，並確保數值符合你的預期。
    接下來，我們將看一些老朋友：`if` 判斷和 `for` 循環。

    其他教學資源（英文）：

    * [Youtube 視頻：Rust Cast - 深入瞭解 Rust 的基礎數字類型
    types](https://www.youtube.com/watch?v=n5TRBkbystY)

    * [網頁：Rust 之書 2018 - 基本數據的深層描述
    types](https://doc.rust-lang.org/1.30.0/book/2018-edition/ch03-02-data-types.html)

    * [網頁：Rust Cheat Sheet - 數據類型](https://cheats.rs/#basic-types)
