- title: 第四章 - 泛型
  content_markdown: |
    泛型在 Rust 中非常重要。它們用於表示可空值（即可能還沒有值的變量）、錯誤處理、集合等等！
    在本章中，我們將學習你可能將會經常使用的基本泛型知識。
- title: 泛型是什麼？
  content_markdown: |
    泛型允許我們不完全定義一個 `struct` 或 `enum`，使編譯器能夠根據我們的代碼使用情況，在編譯時創建一個完全定義的版本。

    Rust 通常可以通過查看我們的實例化來推斷出最終的類型，但是如果需要幫助，你可以使用 `::<T>` 操作符來顯式地進行操作，
    該操作符也被稱為 `turbofish` （它是我的好朋友！）。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=%2F%2F%20%E4%B8%80%E4%B8%AA%E9%83%A8%E5%88%86%E5%AE%9A%E4%B9%89%E7%9A%84%E7%BB%93%E6%9E%84%E4%BD%93%E7%B1%BB%E5%9E%8B%0Astruct%20BagOfHolding%3CT%3E%20%7B%0A%20%20%20%20item%3A%20T%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20%E6%B3%A8%E6%84%8F%EF%BC%9A%E9%80%9A%E8%BF%87%E4%BD%BF%E7%94%A8%E6%B3%9B%E5%9E%8B%EF%BC%8C%E6%88%91%E4%BB%AC%E5%88%9B%E5%BB%BA%E4%BA%86%E7%BC%96%E8%AF%91%E6%97%B6%E5%88%9B%E5%BB%BA%E7%9A%84%E7%B1%BB%E5%9E%8B%EF%BC%8C%E4%BD%BF%E4%BB%A3%E7%A0%81%E6%9B%B4%E5%A4%A7%0A%20%20%20%20%2F%2F%20Turbofish%20%E4%BD%BF%E4%B9%8B%E6%98%BE%E5%BC%8F%E5%8C%96%0A%20%20%20%20let%20i32_bag%20%3D%20BagOfHolding%3A%3A%3Ci32%3E%20%7B%20item%3A%2042%20%7D%3B%0A%20%20%20%20let%20bool_bag%20%3D%20BagOfHolding%3A%3A%3Cbool%3E%20%7B%20item%3A%20true%20%7D%3B%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Rust%20%E4%B9%9F%E5%8F%AF%E4%BB%A5%E6%8E%A8%E6%96%AD%E5%87%BA%E6%B3%9B%E5%9E%8B%E7%9A%84%E7%B1%BB%E5%9E%8B%EF%BC%81%0A%20%20%20%20let%20float_bag%20%3D%20BagOfHolding%20%7B%20item%3A%203.14%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20%E6%B3%A8%E6%84%8F%EF%BC%9A%E5%9C%A8%E7%8E%B0%E5%AE%9E%E7%94%9F%E6%B4%BB%E4%B8%AD%EF%BC%8C%E4%B8%8D%E8%A6%81%E6%8A%8A%E4%B8%80%E8%A2%8B%E4%B8%9C%E8%A5%BF%E6%94%BE%E5%9C%A8%E5%8F%A6%E4%B8%80%E8%A2%8B%E4%B8%9C%E8%A5%BF%E9%87%8C%3A)%0A%20%20%20%20let%20bag_in_bag%20%3D%20BagOfHolding%20%7B%0A%20%20%20%20%20%20%20%20item%3A%20BagOfHolding%20%7B%20item%3A%20%22%E5%98%AD%EF%BC%81%22%20%7D%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20println!(%0A%20%20%20%20%20%20%20%20%22%7B%7D%20%7B%7D%20%7B%7D%20%7B%7D%22%2C%0A%20%20%20%20%20%20%20%20i32_bag.item%2C%20bool_bag.item%2C%20float_bag.item%2C%20bag_in_bag.item.item%0A%20%20%20%20)%3B%0A%7D%0A
- title: 表示空
  content_markdown: |
    在其他語言中，關鍵字 `null` 用於表示沒有值。它給編程語言帶來了困難，因為它使我們的程序在與變量字段交互時可能失敗。

    Rust 沒有 `null`，但這並不代表我們不知道表示空的重要性！我們可以使用一個我們已經瞭解過的工具來簡單地表示這一點。

    因為缺少 `null` 值，這種為一個或多個替代值提供 `None` 替代表示的模式非常常見，
    泛型有助於解決這一難題。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=enum%20Item%20%7B%0A%20%20%20%20Inventory(String)%2C%0A%20%20%20%20%2F%2F%20None%20represents%20the%20absence%20of%20an%20item%0A%20%20%20%20None%2C%0A%7D%0A%0Astruct%20BagOfHolding%20%7B%0A%20%20%20%20item%3A%20Item%2C%0A%7D%0A
- title: Option
  content_markdown: |
    Rust 有一個內置的泛型枚舉叫做 `Option`，它可以讓我們不使用 `null` 就可以表示可以為空的值。

    ```
    enum Option<T> {
        None,
        Some(T),
    }
    ```

    這個枚舉很常見，使用關鍵字 `Some` 和 `None` 可以在任何地方創建其實例。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=%2F%2F%20%E4%B8%80%E4%B8%AA%E9%83%A8%E5%88%86%E5%AE%9A%E4%B9%89%E7%9A%84%E7%BB%93%E6%9E%84%E4%BD%93%0Astruct%20BagOfHolding%3CT%3E%20%7B%0A%20%20%20%20%2F%2F%20%E6%88%91%E4%BB%AC%E7%9A%84%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8BT%E5%8F%AF%E4%BB%A5%E4%BC%A0%E9%80%92%E7%BB%99%E5%85%B6%E4%BB%96%0A%20%20%20%20item%3A%20Option%3CT%3E%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20%E6%B3%A8%E6%84%8F%EF%BC%9A%E4%B8%80%E4%B8%AA%E6%94%BE%20i32%20%E7%9A%84%20bag%EF%BC%8C%E9%87%8C%E9%9D%A2%E4%BB%80%E4%B9%88%E9%83%BD%E6%B2%A1%E6%9C%89%EF%BC%81%0A%20%20%20%20%2F%2F%20%E6%88%91%E4%BB%AC%E5%BF%85%E9%A1%BB%E6%B3%A8%E6%98%8E%E7%B1%BB%E5%9E%8B%EF%BC%8C%E5%90%A6%E5%88%99%20Rust%20%E4%B8%8D%E7%9F%A5%E9%81%93%20bag%20%E7%9A%84%E7%B1%BB%E5%9E%8B%0A%20%20%20%20let%20i32_bag%20%3D%20BagOfHolding%3A%3A%3Ci32%3E%20%7B%20item%3A%20None%20%7D%3B%0A%0A%20%20%20%20if%20i32_bag.item.is_none()%20%7B%0A%20%20%20%20%20%20%20%20println!(%22there's%20nothing%20in%20the%20bag!%22)%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20println!(%22there's%20something%20in%20the%20bag!%22)%0A%20%20%20%20%7D%0A%0A%20%20%20%20let%20i32_bag%20%3D%20BagOfHolding%3A%3A%3Ci32%3E%20%7B%20item%3A%20Some(42)%20%7D%3B%0A%0A%20%20%20%20if%20i32_bag.item.is_some()%20%7B%0A%20%20%20%20%20%20%20%20println!(%22there's%20something%20in%20the%20bag!%22)%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20println!(%22there's%20nothing%20in%20the%20bag!%22)%0A%20%20%20%20%7D%0A%0A%20%20%20%20%2F%2F%20match%20%E5%8F%AF%E4%BB%A5%E8%AE%A9%E6%88%91%E4%BB%AC%E4%BC%98%E9%9B%85%E5%9C%B0%E8%A7%A3%E6%9E%84%20Option%EF%BC%8C%E5%B9%B6%E4%B8%94%E7%A1%AE%E4%BF%9D%E6%88%91%E4%BB%AC%E5%A4%84%E7%90%86%E4%BA%86%E6%89%80%E6%9C%89%E7%9A%84%E5%8F%AF%E8%83%BD%E6%83%85%E5%86%B5%EF%BC%81%0A%20%20%20%20match%20i32_bag.item%20%7B%0A%20%20%20%20%20%20%20%20Some(v)%20%3D%3E%20println!(%22found%20%7B%7D%20in%20bag!%22%2C%20v)%2C%0A%20%20%20%20%20%20%20%20None%20%3D%3E%20println!(%22found%20nothing%22)%2C%0A%20%20%20%20%7D%0A%7D%0A
- title: Result
  content_markdown: |
    Rust 有一個內置的泛型枚舉叫做 `Result`，它可以讓我們返回一個可能包含錯誤的值。
    這是編程語言進行錯誤處理的慣用方法。

    ```
    enum Result<T, E> {
        Ok(T),
        Err(E),
    }
    ```

    注意我們的泛型有多個用逗號分隔的*參數化的類型*。

    這個枚舉很常見，使用關鍵字 `Ok` 和 `Err` 可以在任何地方創建其實例。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20do_something_that_might_fail(i%3Ai32)%20-%3E%20Result%3Cf32%2CString%3E%20%7B%0A%20%20%20%20if%20i%20%3D%3D%2042%20%7B%0A%20%20%20%20%20%20%20%20Ok(13.0)%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20Err(String%3A%3Afrom(%22this%20is%20not%20the%20right%20number%22))%20%20%20%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20result%20%3D%20do_something_that_might_fail(12)%3B%0A%0A%20%20%20%20%2F%2F%20match%20%E8%AE%A9%E6%88%91%E4%BC%98%E9%9B%85%E5%9C%B0%E8%A7%A3%E6%9E%84%20Rust%EF%BC%8C%E5%B9%B6%E4%B8%94%E7%A1%AE%E4%BF%9D%E6%88%91%E4%BB%AC%E5%A4%84%E7%90%86%E4%BA%86%E6%89%80%E6%9C%89%E6%83%85%E5%86%B5%EF%BC%81%0A%20%20%20%20match%20result%20%7B%0A%20%20%20%20%20%20%20%20Ok(v)%20%3D%3E%20println!(%22found%20%7B%7D%22%2C%20v)%2C%0A%20%20%20%20%20%20%20%20Err(e)%20%3D%3E%20println!(%22Error%3A%20%7B%7D%22%2Ce)%2C%0A%20%20%20%20%7D%0A%7D%0A
- title: 可失敗的主函數
  content_markdown: |
    `main` 函數有可以返回 `Result` 的能力！
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20do_something_that_might_fail(i%3A%20i32)%20-%3E%20Result%3Cf32%2C%20String%3E%20%7B%0A%20%20%20%20if%20i%20%3D%3D%2042%20%7B%0A%20%20%20%20%20%20%20%20Ok(13.0)%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20Err(String%3A%3Afrom(%22this%20is%20not%20the%20right%20number%22))%0A%20%20%20%20%7D%0A%7D%0A%0A%2F%2F%20%E4%B8%BB%E5%87%BD%E6%95%B0%E4%B8%8D%E8%BF%94%E5%9B%9E%E5%80%BC%EF%BC%8C%E4%BD%86%E5%8F%AF%E8%83%BD%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF%EF%BC%81%0Afn%20main()%20-%3E%20Result%3C()%2C%20String%3E%20%7B%0A%20%20%20%20let%20result%20%3D%20do_something_that_might_fail(12)%3B%0A%0A%20%20%20%20match%20result%20%7B%0A%20%20%20%20%20%20%20%20Ok(v)%20%3D%3E%20println!(%22found%20%7B%7D%22%2C%20v)%2C%0A%20%20%20%20%20%20%20%20Err(_e)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E4%BC%98%E9%9B%85%E5%9C%B0%E5%A4%84%E7%90%86%E9%94%99%E8%AF%AF%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AA%E8%AF%B4%E6%98%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88%E7%9A%84%E6%96%B0%E9%94%99%E8%AF%AF%EF%BC%81%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20Err(String%3A%3Afrom(%22something%20went%20wrong%20in%20main!%22))%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20%2F%2F%20Notice%20we%20use%20a%20unit%20value%20inside%20a%20Result%20Ok%0A%20%20%20%20%2F%2F%20to%20represent%20everything%20is%20fine%0A%20%20%20%20Ok(())%0A%7D%0A
- title: 優雅地錯誤處理
  content_markdown: |
    `Result` 如此常見以至於 Rust 有個強大的操作符 `?` 來與之配合。
    以下兩個表達式是等價的：

    ```
    do_something_that_might_fail()?
    ```

    ```
    match do_something_that_might_fail() {
        Ok(v) => v,
        Err(e) => return Err(e),
    }
    ```
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20do_something_that_might_fail(i%3A%20i32)%20-%3E%20Result%3Cf32%2C%20String%3E%20%7B%0A%20%20%20%20if%20i%20%3D%3D%2042%20%7B%0A%20%20%20%20%20%20%20%20Ok(13.0)%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20Err(String%3A%3Afrom(%22this%20is%20not%20the%20right%20number%22))%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20-%3E%20Result%3C()%2C%20String%3E%20%7B%0A%20%20%20%20%2F%2F%20%E7%9C%8B%E7%9C%8B%E6%88%91%E4%BB%AC%E8%8A%82%E7%9C%81%E4%BA%86%E5%A4%9A%E5%B0%91%E4%BB%A3%E7%A0%81%EF%BC%81%0A%20%20%20%20let%20v%20%3D%20do_something_that_might_fail(42)%3F%3B%0A%20%20%20%20println!(%22found%20%7B%7D%22%2C%20v)%3B%0A%20%20%20%20Ok(())%0A%7D%0A
- title: 醜陋的 Option/Result 處理
  content_markdown: |
    當你只是試圖快速地寫一些代碼時，`Option`/`Result` 對付起來可能比較無聊。
    `Option` 和 `Result` 都有一個名為 `unwrap` 的函數：這個函數可以簡單粗暴地獲取其中的值。
    `unwrap` 會：

    1. 獲取 Option/Result 內部的值
    2. 如果枚舉的類型是 None/Err， 則會 `panic!`

    這兩段代碼是等價的：

    ```
    my_option.unwrap()
    ```

    ```
    match my_option {
        Some(v) => v,
        None => panic!("some error message generated by Rust!"),
    }
    ```

    類似的：

    ```
    my_result.unwrap()
    ```

    ```
    match my_result {
        Ok(v) => v,
        Err(e) => panic!("some error message generated by Rust!"),
    }
    ```

    不過啊，做個好 Rustacean，正確地使用 `match`！
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20do_something_that_might_fail(i%3A%20i32)%20-%3E%20Result%3Cf32%2C%20String%3E%20%7B%0A%20%20%20%20if%20i%20%3D%3D%2042%20%7B%0A%20%20%20%20%20%20%20%20Ok(13.0)%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20Err(String%3A%3Afrom(%22this%20is%20not%20the%20right%20number%22))%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20-%3E%20Result%3C()%2C%20String%3E%20%7B%0A%20%20%20%20%2F%2F%20%E7%AE%80%E6%B4%81%E4%BD%86%E5%81%87%E8%AE%BE%E6%80%A7%E5%BC%BA%EF%BC%8C%E8%80%8C%E4%B8%94%E5%BE%88%E5%BF%AB%E5%B0%B1%E4%BC%9A%E5%8F%98%E5%BE%97%E4%B8%91%E9%99%8B%0A%20%20%20%20let%20v%20%3D%20do_something_that_might_fail(42).unwrap()%3B%0A%20%20%20%20println!(%22found%20%7B%7D%22%2C%20v)%3B%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20%E8%BF%99%E4%BC%9A%20panic!%0A%20%20%20%20let%20v%20%3D%20do_something_that_might_fail(1).unwrap()%3B%0A%20%20%20%20println!(%22found%20%7B%7D%22%2C%20v)%3B%0A%20%20%20%20%0A%20%20%20%20Ok(())%0A%7D%0A
- title: Vectors
  content_markdown: |
    一些經常使用的泛型是集合類型。一個 vector 是可變長度的元素集合，以 `Vec` 結構表示。

    比起手動構建，宏 `vec!` 讓我們可以輕鬆地創建 vector。

    `Vec` 有一個形如 `iter()` 的方法可以為一個 vector 創建迭代器，這允許我們可以輕鬆地將 vector 用到 `for` 循環中去。

    內存細節：
    * `Vec` 是一個結構體，但是內部其實保存了在堆上固定長度數據的引用。
    * 一個 vector 開始有默認大小容量，當更多的元素被添加進來後，它會重新在堆上分配一個新的並具有更大容量的定長列表。（類似 C++ 的 vector）
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20%2F%2F%20%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E6%98%BE%E5%BC%8F%E7%A1%AE%E5%AE%9A%E7%B1%BB%E5%9E%8B%0A%20%20%20%20let%20mut%20i32_vec%20%3D%20Vec%3A%3A%3Ci32%3E%3A%3Anew()%3B%20%2F%2F%20turbofish%20%3C3%0A%20%20%20%20i32_vec.push(1)%3B%0A%20%20%20%20i32_vec.push(2)%3B%0A%20%20%20%20i32_vec.push(3)%3B%0A%0A%20%20%20%20%2F%2F%20%E4%BD%86%E6%98%AF%E7%9C%8B%E7%9C%8B%20Rust%20%E6%98%AF%E5%A4%9A%E4%B9%88%E8%81%AA%E6%98%8E%E7%9A%84%E8%87%AA%E5%8A%A8%E6%A3%80%E6%B5%8B%E7%B1%BB%E5%9E%8B%E5%95%8A%0A%20%20%20%20let%20mut%20float_vec%20%3D%20Vec%3A%3Anew()%3B%0A%20%20%20%20float_vec.push(1.3)%3B%0A%20%20%20%20float_vec.push(2.3)%3B%0A%20%20%20%20float_vec.push(3.4)%3B%0A%0A%20%20%20%20%2F%2F%20%E8%BF%99%E6%98%AF%E4%B8%AA%E6%BC%82%E4%BA%AE%E7%9A%84%E5%AE%8F%EF%BC%81%0A%20%20%20%20let%20string_vec%20%3D%20vec!%5BString%3A%3Afrom(%22Hello%22)%2C%20String%3A%3Afrom(%22World%22)%5D%3B%0A%0A%20%20%20%20for%20word%20in%20string_vec.iter()%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20word)%3B%0A%20%20%20%20%7D%0A%7D
- title: 第四章 - 總結
  content_markdown: |
    在這一章中，我們瞭解了泛型給我們帶來的強大功能！如果你還不完全知道該如何使用這一切，
    別擔心，僅僅是瞭解這些將會在代碼中反覆出現的中心思想就足夠了。我們的功能在日趨強大！
    在下一章中，我們將討論 Rust 中的一個重要概念：數據所有權。
