- title: Capítulo 4 - Tipos Genéricos
  content_markdown: >
    Los tipos genéricos son muy importantes en Rust. Se utilizan en la
    representación de valores nulos,

    (es decir, variables que podrían no tener ningún valor todavía) en la
    gestión de errores, en las colecciones, etc.

    En este capítulo hablaremos sobre los tipos genéricos fundamentales que
    probablemente ya estés usando todo el tiempo.
- title: ¿Qué Son los Tipos Genéricos?
  content_markdown: >
    Los tipos genéricos nos permiten definir parcialmente una estructura
    (`struct`) o `enum`,

    permitiendo a un compilador crear una versión completamente definida en
    tiempo de compilación

    basada en el uso de nuestro código.


    Por lo general, Rust puede inferir el tipo final mirando nuestra
    instanciación, pero si necesita

    ayuda siempre puede indicarlo usando el operador `::<T>`, también conocido
    con el nombre de `turbofish`.
- title: Ausencia de Valor
  content_markdown: >
    En otros lenguajes de programación, la palabra reservada `null` se utiliza
    para representar la ausencia de valor.

    Esto crea ciertas dificultades en dichos lenguajes, ya que aparece la
    posibilidad de que nuestro programa falle al

    interactuar con una variable o campo.


    En Rust no hay `null`, pero eso no quiere decir que ignore la importancia de
    representar la ausencia de valor.

    Se puede representar usando herramientas que ya conocemos.


    Este patrón de proporcionar una alternativa nula `None` para uno o muchos
    valores alternativos es muy común en

    Rust debido a su falta de un valor `null`. Los tipos genéricos ayudan a
    resolver este desafío.
- title: Option
  content_markdown: >
    Rust tiene un enumerado genérico integrado llamado `Option` que nos permite
    representar

    valores nulos sin usar `null`.


    ```

    enum Option<T> {
        None,
        Some(T),
    }

    ```


    Este enum es tan común que se pueden crear instancias del enum en cualquier
    lugar con las

    palabras reservadas `Some` y `None`.
- title: Result
  content_markdown: >
    Rust tiene  un enumerado genérico integrado llamado `Result` que nos permite
    devolver un

    valor que puede dar error. Es la forma que este lenguaje tiene de gestionar
    los errores.


    ```

    enum Result<T, E> {
        Ok(T),
        Err(E),
    }

    ```


    Ten en cuenta que nuestro tipo genérico tiene múltiples *tipos
    parametrizados* separados

    por una coma.


    Este enum es tan común que se pueden crear instancias del enum en cualquier
    lugar con las

    palabras reservadas `Ok` y `Err`.
- title: Main Fallido
  content_markdown: |
    `main` tiene la capacidad de devolver un valor del enumerado `Result`
- title: Gestionar Errores de Forma Elegante
  content_markdown: >
    `Result` es tan común que Rust cuenta con el operador `?` para trabajar con
    él.

    Estas dos afirmaciones son equivalentes:


    ```

    do_something_that_might_fail()?

    ```


    ```

    match do_something_that_might_fail() {
        Ok(v) => v,
        Err(e) => return Err(e),
    }

    ```
- title: Gestionar Errores Option y Result de Forma Poco Elegante
  content_markdown: >
    Al escribir código rápido, puede que trabajar con `Option`/`Result` sea un
    fastidio. Tanto

    `Option` como `Result` tienen una función llamada `unwrap` que puede ser
    útil para obtener

    un valor de manera rápida pero poco elegante. `unwrap` puede:
     
    1. Obtener el valor dentro de Option/Result. 

    2. Si la lista es del tipo None/Err, `panic!`


    Estos dos fragmentos de código son equivalentes:


    ```

    my_option.unwrap()

    ```


    ```

    match my_option {
        Some(v) => v,
        None => panic!("some error message generated by Rust!"),
    }

    ```


    De igual manera:


    ```

    my_result.unwrap()

    ```


    ```

    match my_result {
        Ok(v) => v,
        Err(e) => panic!("some error message generated by Rust!"),
    }

    ```


    ¡Sé un buen Rustacean y usa `match` siempre que puedas!
- title: Vectores
  content_markdown: >
    Algunos de los tipos genéricos más útiles son los tipos de colección. Un
    vector es una lista de

    tamaño variable de elementos representados por la estructura `Vec`.


    La macro `vec!` nos permite crear fácilmente un vector en lugar de
    construirlo manualmente.


    `Vec` tiene el método `iter()` que crea un iterador a partir de un vector,
    permitiéndonos poner

    fácilmente un vector en un bucle `for`.


    Detalles de memoria:

    * `Vec` es una estructura, pero internamente contiene una referencia a una
    lista fija de sus

    elementos en el montículo.

    * Un vector comienza con una capacidad por defecto, cuando se añaden más
    elementos de los que

    tiene capacidad, reasigna sus datos en el montículo para tener una nueva
    lista fija con más capacidad.
- title: Capítulo 4 - Conclusión
  content_markdown: >
    En sólo un capítulo hemos aprendido el poder de los tipos genéricos. No te
    preocupes si no sabes completamente

    cómo usarlo todo, ahora mismo es bueno ser consciente de las principales
    ideas que verás una y otra vez en el código.

    ¡Nuestras funciones se están haciendo bastante largas! En el próximo
    capítulo hablaremos de un concepto importante de

    Rust: pertenencia de datos.
