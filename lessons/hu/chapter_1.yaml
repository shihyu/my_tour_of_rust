- title: 1. Fejezet - Az Alapok
  content_markdown: |
    Az első fejezetben a nyelv alapjaival fogunk megismerkedni, többek között a függvényekkel, a
    változókkal és a legalapabb típusokkal. Üdv a fedélzeten!

    Ja igen! Ha kíváncsi vagy ki ez az aranyos rák, aki épp hozzád beszél, a nevem **Ferris**, én
    vagyok a Rust nyelv nem-hivatalos kabalája. Örülök a találkozásnak.
- title: A Rust Homokozó
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20println!(%22%C3%9Cdv%20a%20homokoz%C3%B3ban!%20Az%20itt%20tal%C3%A1lhat%C3%B3%20k%C3%B3d%20szabadon%20megv%C3%A1ltoztathat%C3%B3!%22)%3B%0A%7D
  content_markdown: |
    Ez a bemutató egy interaktív programozó eszközt használ a [Rust
    Homokozóból](https://play.rust-lang.org).

    Remek arra, hogy kipróbálhass dolgokat, kihívásokat oldj meg és, hogy bemutathasd a
    kreativitásod.
- title: Változók
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20%2F%2F%20rust%20infers%20the%20type%20of%20x%0A%20%20%20%20let%20x%20%3D%2013%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%0A%20%20%20%20%2F%2F%20rust%20can%20also%20be%20explicit%20about%20the%20type%0A%20%20%20%20let%20x%3A%20f64%20%3D%203.14159%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%0A%20%20%20%20%2F%2F%20rust%20can%20also%20declare%20and%20initialize%20later%2C%20but%20this%20is%20rarely%20done%0A%20%20%20%20let%20x%3B%0A%20%20%20%20x%20%3D%200%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%7D%0A
  content_markdown: |
    A változókat a **let** kulcsszóval hozzuk létre.

    Amikor egy változóhoz hozzárendelünk, a Rust az esetek 99%-ban képes lesz kitalálni, mi is a
    típusa. Ha ez mégse sikerül neki, akkor a változó deklarációjában ezt te magad is megteheted.

    Figyeld meg, hogy ugyanahhoz a változónévhez többször is hozzárendelhetünk értékeket. Ezt
    változó-árnyékolásnak nevezzük, a változó típusa is megváltozhat ilyenkor.

    A változóneveket mindig 'kígyó_módon' adjuk meg.
- title: Változók megváltoztatása
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20mut%20x%20%3D%2042%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%20%20%20%20x%20%3D%2013%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%7D%0A
  content_markdown: |
    A Rust nagy figyelmet fordít afelé, hogy mely változókat lehet megváltoztatni. Minden érték
    kétféle kategóriába esik:

    * **megváltoztatható** - a fordító megengedi, hogy az ilyen változókba való írást és a belőlük
    való olvasást is.
    * **megváltoztathatatlan** - a fordító csak a változóból való olvasást engedi.

    A megváltoztatható értékek a **mut** ("mutable", "megváltoztatható") kulcsszóval vannak jelölve.

    A későbbiekben több szó is lesz majd erről a kulcsszóról, de egyelőre csak tartsd észben, hogy
    létezik.
- title: Alapvető típusok
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20x%20%3D%2012%3B%20%2F%2F%20by%20default%20this%20is%20i32%0A%20%20%20%20let%20a%20%3D%2012u8%3B%0A%20%20%20%20let%20b%20%3D%204.3%3B%20%2F%2F%20by%20default%20this%20is%20f64%0A%20%20%20%20let%20c%20%3D%204.3f32%3B%0A%20%20%20%20let%20bv%20%3D%20true%3B%0A%20%20%20%20let%20t%20%3D%20(13%2C%20false)%3B%0A%20%20%20%20let%20sentence%20%3D%20%22hello%20world!%22%3B%0A%20%20%20%20println!(%0A%20%20%20%20%20%20%20%20%22%7B%7D%20%7B%7D%20%7B%7D%20%7B%7D%20%7B%7D%20%7B%7D%20%7B%7D%20%7B%7D%22%2C%0A%20%20%20%20%20%20%20%20x%2C%20a%2C%20b%2C%20c%2C%20bv%2C%20t.0%2C%20t.1%2C%20sentence%0A%20%20%20%20)%3B%0A%7D%0A
  content_markdown: |
    A Rust sokféle, valószínűleg már ismert típust különböztet meg:

    * boolean - `bool` igaz és hamis értékekhez
    * előjel nélküli egészek - `u8` `u16` `u32` `u64` `u128` nemnegatív egész
    számok kifejezésére
    * előjeles egészek - `i8` `i16` `i32` `i64` `i128` egész számok kifejezésére
    * mutató méretű egészek - `usize` `isize` tömbök indexeinek és a memóriában
    tárolt dolgok méretének tárolására
    * lebegőpontos törtek - `f32` `f64`
    * *tuple*-k [1] - `(érték, érték, ...)` meghatározott hosszú és típusú
    értékek a veremben való eltárolására szánt gyűjtemény
    * tömbök - `[érték, érték, ...]` ugyanolyan típusú értékek fordításkor is
    ismert hosszal rendelkező gyűjteménye
    * szeletek - ugyanolyan típusú értékek futáskor ismert hosszal rendelkező
    gyűjteménye
    * `str` (szöveg szelet) - szöveg, melynek a hosszát csak futáskor ismerjük

    A szövegek kezelése kicsit bonyultabb, mint ahogy azt más nyelvekben megszokhattad. Mivel a Rust
    egy alacsony-szintű programozási nyelv, így fontosnak tartja az olyan memória-hibák elkerülését
    is, amikre esetleg eddig nem is gondoltál. De erről majd később.

    A számértékek típusait explicit módon is meg lehet adni azzal, hogy a szám végére illesztjük
    annak típusát (pl.: `13u32`, `2u8`).

    [1]: A *tuple* magyar megfelelője az ú.n. "rendezett *n*-es", ám mivel ez borzasztó hülyén néz
    ki programozós kontextusban és a tuple annyira elterjedt kfiejezés, hogy a kedves olvasó
    valószínűleg eddig is ismerte már, így ebben a könyvben fordítatlanul fogom hagyni. -- *A
    fordító*
- title: Egyszerű típusok közötti átalakítás
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20a%20%3D%2013u8%3B%0A%20%20%20%20let%20b%20%3D%207u32%3B%0A%20%20%20%20let%20c%20%3D%20a%20as%20u32%20%2B%20b%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20c)%3B%0A%0A%20%20%20%20let%20t%20%3D%20true%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20t%20as%20u8)%3B%0A%7D%0A
  content_markdown: |
    A Rust a számtípusok használatakor meglehetősen szigorú. Például nem használhatsz `u8`-t olyan
    helyen, ami `u32`-t vár anélkül, hogy hibát dobna.

    Szerencsére a típusok közötti átalakítás nagyon egyszerű az **as** kulcsszó használatával.
- title: Konstansok
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=const%20PI%3A%20f32%20%3D%203.14159%3B%0A%0Afn%20main()%20%7B%0A%20%20%20%20println!(%0A%20%20%20%20%20%20%20%20%22To%20make%20an%20apple%20%7B%7D%20from%20scratch%2C%20you%20must%20first%20create%20a%20universe.%22%2C%0A%20%20%20%20%20%20%20%20PI%0A%20%20%20%20)%3B%0A%7D%0A
  content_markdown: |
    A konstansok lehetővé teszik nekünk, hogy elnevezhessünk gyakran használt értékeket. Ahelyett,
    hogy változók értékeit kézzel másolgatnánk oda, ahol azokat használjuk, a fordító lecseréli
    helyettünk a konstansok nevét a megfelelő értékre.

    A változókkal ellentétben a konstansoknak mindig explicit módon meg kell adnunk a típusát.

    A konstansok neveit mindig `ORDÍTÓ_KÍGYÓ_MÓDON` adjuk meg.
- title: Tömbök
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20nums%3A%20%5Bi32%3B%203%5D%20%3D%20%5B1%2C%202%2C%203%5D%3B%0A%20%20%20%20println!(%22%7B%3A%3F%7D%22%2C%20nums)%3B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20nums%5B1%5D)%3B%0A%7D%0A
  content_markdown: |
    Egy *tömb* egy olyan azonos típusú elemeket tartalmazó csoport, aminek a hossza (elemeinek
    száma) megváltoztathatatlan.

    A *tömbök* típusa `[T;N]`, ahol T az elemek típusa és N pedig a hossza, amit fordításkor már
    tudnunk kell.

    Egyes elemek elérhetőek a `[x]` operátorral, ahol *x* egy *usize* indexe
    (0-val kezdődő sorszáma) annak az elemnek, amit szeretnél.
- title: Függvények
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20add(x%3A%20i32%2C%20y%3A%20i32)%20-%3E%20i32%20%7B%0A%20%20%20%20return%20x%20%2B%20y%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20add(42%2C%2013))%3B%0A%7D%0A
  content_markdown: |
    A függvényeknek nulla vagy több paraméterük van.

    Ebben a példában az add két `i32` (32 bit hosszú előjeles szám) paramétert vár.

    A függvények nevei mindig `kígyó_módon` vannak megadva.
- title: Több visszatérési érték
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20swap(x%3A%20i32%2C%20y%3A%20i32)%20-%3E%20(i32%2C%20i32)%20%7B%0A%20%20%20%20return%20(y%2C%20x)%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20return%20a%20tuple%20of%20return%20values%0A%20%20%20%20let%20result%20%3D%20swap(123%2C%20321)%3B%0A%20%20%20%20println!(%22%7B%7D%20%7B%7D%22%2C%20result.0%2C%20result.1)%3B%0A%0A%20%20%20%20%2F%2F%20destructure%20the%20tuple%20into%20two%20variables%20names%0A%20%20%20%20let%20(a%2C%20b)%20%3D%20swap(result.0%2C%20result.1)%3B%0A%20%20%20%20println!(%22%7B%7D%20%7B%7D%22%2C%20a%2C%20b)%3B%0A%7D%0A
  content_markdown: |
    A függvények több értékkel is visszatérhetnek egy **tuple** formájában.

    A tuple-k elemeit az indexük számával lehet elérni.

    A Rust többféle elérési módot is biztosít, amivel az adatok bizonyos részeit kényelmes módon
    érhetjük el. De erről később lesz szó!
- title: Semmivel való visszatérés
  content_markdown: |
    Ha nincs visszatérési érték megadva egy függvénynek, akkor egy üres tuple-el tér vissza, melyet
    *unit*-nak hívunk.

    Az üres tuple-öket `()`-al jelöljük.

    A `()` használata ritkán fordul elő, de mégis elég gyakori ahhoz, hogy érdemes tudni miről is
    van szó.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20make_nothing()%20-%3E%20()%20%7B%0A%20%20%20%20return%20()%3B%0A%7D%0A%0A%2F%2F%20the%20return%20type%20is%20implied%20as%20()%0Afn%20make_nothing2()%20%7B%0A%20%20%20%20%2F%2F%20this%20function%20will%20return%20()%20if%20nothing%20is%20specified%20to%20return%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20a%20%3D%20make_nothing()%3B%0A%20%20%20%20let%20b%20%3D%20make_nothing2()%3B%0A%0A%20%20%20%20%2F%2F%20Printing%20a%20debug%20string%20for%20a%20and%20b%0A%20%20%20%20%2F%2F%20Because%20it's%20hard%20to%20print%20nothingness%0A%20%20%20%20println!(%22The%20value%20of%20a%3A%20%7B%3A%3F%7D%22%2C%20a)%3B%0A%20%20%20%20println!(%22The%20value%20of%20b%3A%20%7B%3A%3F%7D%22%2C%20b)%3B%0A%7D%0A
- title: 1. Fejezet - Konklúzió
  content_markdown: |
    Gratula az első fejezet teljesítéséhez! Ugye nem is olyan rossz eddig? Bepillantást nyertünk
    abba, hogyan is gondolkodik a fordító. Mivel a Rust egy alacsony-szintű programozási nyelv, így
    nagy figyelmet fordít a memóriában tárolt értékek méretére, arra, hogy a változók
    megváltoztathatóak-e vagy sem és, hogy a számításaid valóban úgy történnek, ahogy szeretnéd. A
    következő oldalon két régi baráttal fogunk megismerkedni: az `if`-el és a `for` ciklussal.

    További források angolul:

    * [Youtube: Rust Cast - A deeper dive on Rust's primitive number
    types](https://www.youtube.com/watch?v=n5TRBkbystY)
    * [Website: Rust Book 2018 - A deeper description on basic data
    types](https://doc.rust-lang.org/1.30.0/book/2018-edition/ch03-02-data-types.html)
    * [Website: Rust Cheat Sheet - Data Types](https://cheats.rs/#basic-types)
