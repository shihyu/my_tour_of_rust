- title: Kapitel 3 - Datenstrukturen
  content_markdown: >
    Zeit die Basisdatentypen zu erweitern! Hier werden wir leicht komplexere
    Datenstrukturen

    in Rust betrachten, speziell wie die Daten im Speicher verteilt werden. Alle
    low-level-Enthusiasten

    (mitunter dir) werden sicherlich Gefallen daran haben, wie wenig Rust vor
    einem versteckt.
- title: Strukturen
  content_markdown: >
    Ein `struct` (dt. "Struktur") ist eine Ansammlung von fields (dt. Feldern).


    Ein *field* ist ein Wert, der mit einer Datenstruktur assoziiert wird. Dies
    kann ein primitiver Datentyp oder ein weiteres `struct` sein.


    Die Definition eines structs ist wie ein Entwurf für den Compiler, der ihm
    besagt, welche Felder im Speicher zueinander gehören.
- title: Methoden aufrufen
  content_markdown: >
    Einen feinen Unterschied zu Funktionen bilden Methoden. Methoden sind
    Erweiterungen zu Datentypen,

    bzw. Funktionen die auf Datentypen anzuwenden sind.


    **statische Methoden** - Methoden, die zum Datentyp selber assoziiert sind.
    Werden mit dem `::` Operator aufgerufen.


    **instanz Methoden** (instance methods) - Methoden, die bei einer Instanz
    (oder Objekt) mit dem `.` Operator aufgerufen werden können.


    Wir werden im späteren Verlauf sehen, wie wir selber Methoden erstellen
    können.
- title: Speicher
  content_markdown: >
    In Rust gibt es 3 unterschiedliche Speicher-Regionen:

    * **data memory** (Datenspeicher) - Für Daten mit fester Größe und die
    **statisch** sind (zur Gesamtlebenszeit
      eines Programms verfügbar). Nehmen wir beispielsweise festen Text her (z.B. `"Hallo Welt"`). Die Bytes in
      diesem Schnipsel werden nur gelesen und sind bereits zur Kompilierzeit bekannt, daher kommen sie in den
      Datenspeicher. Compiler können dementsprechend den Code optimieren und sind in der Laufzeit am schnellsten
      "auszuwerten."
    * **stack memory** (Stackspeicher) - Variablen, die innerhalb einer Funktion
    deklariert werden. Während eines
      Funktionsaufrufs ändert sich der Standort nicht. Wird eine weitere Funktion aufgerufen, werden die von der
      Unterfunktion benötigen Variablen weiter auf den Stack gelegt. Erreicht man das Ende der Funktion, werden die
      entsprechenden Variablen wieder vom Stack runtergenommen.
    * **heap memory** (Heapspeicher) - Speicher, der zur Laufzeit für Daten
    reserviert wird. In dieser Region kann
      Speicher reserviert, bewegt, vergrößert, verkleinert und freigegeben werden. Dieses dynamische
      Speichermanagement kann etwas mehr Zeit in Anspruch nehmen. Beim Reservieren spricht man von **memory allocationt**
      (allozieren), beim Freigeben von **memory deallocation**.
- title: Structs initialisieren
  content_markdown: >
    Wenn ein struct **instanziiert** wird, legt das Programm die Felder des
    structs Seite an Seite im Speicher an.


    Die Initialisierung erfolgt mit folgendem Syntax:


    `StructName { feld1, feld2, ... }`.


    Auf die Felder des structs werden mit einem `.` zugegriffen.


    In unserem Beispiel bedeutet das:

    * Text innerhalb der Anführungszeichen sind read-only Daten (z.B. "ferris"),
    daher sind sie
      in **data memory**
    * Der Funktionsaufruf `String::from` erstellt ein struct `String` das Seite
    an Seite der anderen
      Felder in `SeaCreature` auf den **stack** gelegt wird. Ein String repräsentiert (veränderbaren) Text,
      der...
      1. ... im **heap** angelegt wird und daher dort verändert werden kann,
      2. ... die Adresse (Referenz) zum Speicherstück im heap im `String` struct speichert
    * Nachdem unsere Freunde *Ferris* und *Sarah* Datenstrukturen sind, die in
    der main-Funktion
      erstellt wurden, werden diese auf den **stack** platziert.
- title: Tuple-Structs
  content_markdown: >
    Eine verkürzte Schreibweiße bietet das Instanziieren von structs mittels von
    **Tupeln**.
- title: Unit-Structs
  content_markdown: >
    Structs müssen keine Felder enthalten.


    Wie in Kapitel 1 ist ein *unit* ein anderes Wort für ein leeres Tupel `()`.
    Daher werden diese structs auch *unit-like* (unit-ähnlich) genannt.


    Sowas wird allerdings nur selten verwendet.
- title: Enumerations
  content_markdown: >
    Aufzählungen (enumerations) erlauben das Erzeugen eines neuen Typs, die nur
    eine fixe Liste an Werten zulassen.

    Die gültigen Werte werden mit dem `enum` Schlüsselwort eingeleitet.


    `enum` ist besonders im Zusammenhang mit `match` nützlich: da `match`
    exhaustive ist, versucht es den Programmierer darüber zu

    informieren, falls nicht alle möglichen Testfälle durchgegangen wurden.


    Versuche unser Beispielcode zum Laufen zu bringen. Welcher Fall wurde in
    `match` nicht berücksichtigt? Kannst du diesen noch einfügen?
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=%23!%5Ballow(dead_code)%5D%20%2F%2F%20this%20line%20prevents%20compiler%20warnings%0A%0Aenum%20Species%20%7B%0A%20%20%20%20Crab%2C%0A%20%20%20%20Octopus%2C%0A%20%20%20%20Fish%2C%0A%20%20%20%20Clam%2C%0A%7D%0A%0Astruct%20SeaCreature%20%7B%0A%20%20%20%20species%3A%20Species%2C%0A%20%20%20%20name%3A%20String%2C%0A%20%20%20%20arms%3A%20i32%2C%0A%20%20%20%20legs%3A%20i32%2C%0A%20%20%20%20weapon%3A%20String%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20SeaCreature's%20data%20is%20on%20stack%0A%20%20%20%20let%20ferris%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20String%20struct%20is%20also%20on%20stack%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20but%20holds%20a%20reference%20to%20data%20on%20heap%0A%20%20%20%20%20%20%20%20species%3A%20Species%3A%3ACrab%2C%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20arms%3A%202%2C%0A%20%20%20%20%20%20%20%20legs%3A%204%2C%0A%20%20%20%20%20%20%20%20weapon%3A%20String%3A%3Afrom(%22claw%22)%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20match%20ferris.species%20%7B%0A%20%20%20%20%20%20%20%20Species%3A%3ACrab%20%3D%3E%20println!(%22ferris%20is%20a%20crab%22)%2C%0A%20%20%20%20%20%20%20%20Species%3A%3AOctopus%20%3D%3E%20println!(%22ferris%20is%20a%20octopus%22)%2C%0A%20%20%20%20%20%20%20%20Species%3A%3AFish%20%3D%3E%20println!(%22ferris%20is%20a%20fish%22)%2C%0A%20%20%20%20%7D%0A%7D%0A
- title: Enumerations mit Daten
  content_markdown: >
    `enum` Elemente können auch Daten (oder Felder) beinhalten, vergleichbar mit
    *unions* aus C (nicht der Arbeitergewerkschaft haha).


    Wenn ein `enum` in einem Fall im `match` übereinstimmt, können die Werte aus
    dem struct direkt an Variablen gebunden werden

    (im Beispiel in Zeile 32 zu sehen).


    Weitere Details zu `enum`:

    * Der Speicherbedarf eines enums entspricht dem des größten Elements (hier
    wäre `Claw` das größte Element).

    * Neben den Datentypen (sollte es welche geben) kann jedes Element mittels
    einer Zahl erreicht werden.


    Mehr Details!

    * `enum` ist in Rust auch bekannt als *tagged-union*.

    * Das Kombinieren von verschiedenen Typen wird in Rust auch als
    *algebraischer Typ* bezeichnet (eng. algebraic type).
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=%23!%5Ballow(dead_code)%5D%20%2F%2F%20this%20line%20prevents%20compiler%20warnings%0A%0Aenum%20Species%20%7B%20Crab%2C%20Octopus%2C%20Fish%2C%20Clam%20%7D%0Aenum%20PoisonType%20%7B%20Acidic%2C%20Painful%2C%20Lethal%20%7D%0Aenum%20Size%20%7B%20Big%2C%20Small%20%7D%0A%0A%2F%2F%20Claw%20has%20additional%20information%20about%20number%20of%20claws%20and%20size%0A%2F%2F%20Poison%20has%20additional%20information%20about%20the%20type%20of%20poison%0Aenum%20Weapon%20%7B%0A%20%20%20%20Claw(i32%2C%20Size)%2C%0A%20%20%20%20Poison(PoisonType)%2C%0A%20%20%20%20None%0A%7D%0A%0Astruct%20SeaCreature%20%7B%0A%20%20%20%20species%3A%20Species%2C%0A%20%20%20%20name%3A%20String%2C%0A%20%20%20%20arms%3A%20i32%2C%0A%20%20%20%20legs%3A%20i32%2C%0A%20%20%20%20weapon%3A%20Weapon%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20ferris%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20species%3A%20Species%3A%3ACrab%2C%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20arms%3A%202%2C%0A%20%20%20%20%20%20%20%20legs%3A%204%2C%0A%20%20%20%20%20%20%20%20weapon%3A%20Weapon%3A%3AClaw(2%2C%20Size%3A%3ASmall)%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20match%20ferris.weapon%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20number%20of%20claws%20and%20size%20is%20bound%20to%20the%20variables%20num_claws%20and%20size%0A%20%20%20%20%20%20%20%20Weapon%3A%3AClaw(num_claws%2Csize)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20let%20size_description%20%3D%20match%20size%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Size%3A%3ABig%20%3D%3E%20%22big%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Size%3A%3ASmall%20%3D%3E%20%22small%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22ferris%20is%20a%20crab%20with%20%7B%7D%20%7B%7D%20claws%22%2C%20num_claws%2C%20size_description)%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20_%20%3D%3E%20println!(%22ferris%20is%20a%20crab%20with%20some%20other%20weapon%22)%0A%20%20%20%20%7D%0A%7D%0A
- title: Kapitel 3 - Fazit
  content_markdown: >
    Wie aufregend! Wir haben jetzt das Werkzeug, womit wir unsere Ideen im Code
    repräsentieren können.

    Diese Einblicke in Rust's fundamentale Operationen und wie sie im Einklang
    zueinander stehen, sollte bei so manchen von euch

    hoffentlich einen Funken verursacht haben. Als nächstes wagen wir uns in
    noch mehr Flexibilität: den *generics*.
